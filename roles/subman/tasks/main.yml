---

- name: initialize subman dictionary
  set_fact:
    subman: "{{ subman|default({}) }}"

- name: gather subman.cpu.cpu(s) fact
  raw: subscription-manager facts --list | grep '^cpu.cpu(s).' | sed -n -e 's/^.*cpu.cpu(s).\s*//p'
  register: subman_cpu_cpu_cmd
  ignore_errors: yes
  become: yes
  when: 'have_subscription_manager and "subman.cpu.cpu(s)" in facts_to_collect'

- name: extract result value for subman.cpu.cpu(s)
  set_fact:
    subman_cpu_cpu: "{{  subman_cpu_cpu_cmd['stdout'] | trim | default('error') if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.cpu.cpu(s)" in facts_to_collect and "stdout" in subman_cpu_cpu_cmd'

- name: handle failure value for subman.cpu.cpu(s)
  set_fact:
    subman_cpu_cpu: "{{ 'error' if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.cpu.cpu(s)" in facts_to_collect and "stdout" not in subman_cpu_cpu_cmd'

- name: add subman.cpu.cpu(s) to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_cpu_cpu }) }}"
  with_items:
  - 'subman.cpu.cpu(s)'
  when: '"subman.cpu.cpu(s)" in facts_to_collect'

- name: gather subman.cpu.core(s)_per_socket fact
  raw: subscription-manager facts --list | grep '^cpu.core(s)_per_socket.' | sed -n -e 's/^.*cpu.core(s)_per_socket.\s*//p'
  register: subman_cpu_core_per_socket_cmd
  ignore_errors: yes
  become: yes
  when: 'have_subscription_manager and "subman.cpu.core(s)_per_socket" in facts_to_collect'

- name: extract result value for subman.cpu.core(s)_per_socket
  set_fact:
    subman_cpu_core_per_socket: "{{  subman_cpu_core_per_socket_cmd['stdout'] | trim | default('error') if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.cpu.core(s)_per_socket" in facts_to_collect and "stdout" in subman_cpu_core_per_socket_cmd'

- name: handle failure value for subman.cpu.core(s)_per_socket
  set_fact:
    subman_cpu_core_per_socket: "{{ 'error' if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.cpu.core(s)_per_socket" in facts_to_collect and "stdout" not in subman_cpu_core_per_socket_cmd'

- name: add subman.cpu.core(s)_per_socket to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_cpu_core_per_socket }) }}"
  with_items:
  - 'subman.cpu.core(s)_per_socket'
  when: '"subman.cpu.core(s)_per_socket" in facts_to_collect'

- name: gather subman.cpu.cpu_socket(s) fact
  raw: subscription-manager facts --list | grep '^cpu.cpu_socket(s).' | sed -n -e 's/^.*cpu.cpu_socket(s).\s*//p'
  register: subman_cpu_cpu_socket_cmd
  ignore_errors: yes
  become: yes
  when: 'have_subscription_manager and "subman.cpu.cpu_socket(s)" in facts_to_collect'

- name: extract result value for subman.cpu.cpu_socket(s)
  set_fact:
    subman_cpu_cpu_socket: "{{  subman_cpu_cpu_socket_cmd['stdout'] | trim | default('error') if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.cpu.cpu_socket(s)" in facts_to_collect and "stdout" in subman_cpu_cpu_socket_cmd'

- name: handle failure value for subman.cpu.cpu_socket(s)
  set_fact:
    subman_cpu_cpu_socket: "{{ 'error' if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.cpu.cpu_socket(s)" in facts_to_collect and "stdout" not in subman_cpu_cpu_socket_cmd'

- name: add subman.cpu.cpu_socket(s) to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_cpu_cpu_socket }) }}"
  with_items:
  - 'subman.cpu.cpu_socket(s)'
  when: '"subman.cpu.cpu_socket(s)" in facts_to_collect'

- name: gather subman.virt.host_type fact
  raw: subscription-manager facts --list | grep '^virt.host_type.' | sed -n -e 's/^.*virt.host_type.\s*//p'
  register: subman_virt_host_type_cmd
  ignore_errors: yes
  become: yes
  when: 'have_subscription_manager and "subman.virt.host_type" in facts_to_collect'

- name: extract result value for subman.virt.host_type
  set_fact:
    subman_virt_host_type: "{{  subman_virt_host_type_cmd['stdout'] | trim | default('error') if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.virt.host_type" in facts_to_collect and "stdout" in subman_virt_host_type_cmd'

- name: handle failure value for subman.virt.host_type
  set_fact:
    subman_virt_host_type: "{{ 'error' if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.virt.host_type" in facts_to_collect and "stdout" not in subman_virt_host_type_cmd'

- name: add subman.virt.host_type to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_virt_host_type }) }}"
  with_items:
  - 'subman.virt.host_type'
  when: '"subman.virt.host_type" in facts_to_collect'

- name: gather subman.virt.is_guest fact
  raw: subscription-manager facts --list | grep '^virt.is_guest.' | sed -n -e 's/^.*virt.is_guest.\s*//p'
  register: subman_virt_is_guest_cmd
  ignore_errors: yes
  become: yes
  when: 'have_subscription_manager and "subman.virt.is_guest" in facts_to_collect'

- name: extract result value for subman.virt.is_guest
  set_fact:
    subman_virt_is_guest: "{{  subman_virt_is_guest_cmd['stdout'] | string() | trim | default('error') if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.virt.is_guest" in facts_to_collect and "stdout" in subman_virt_is_guest_cmd'

- name: handle failure value for subman.virt.is_guest
  set_fact:
    subman_virt_is_guest: "{{ 'error' if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.virt.is_guest" in facts_to_collect and subman_virt_is_guest_cmd is mapping and "stdout" not in subman_virt_is_guest_cmd'

- name: add subman.virt.is_guest to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_virt_is_guest }) }}"
  with_items:
  - 'subman.virt.is_guest'
  when: '"subman.virt.is_guest" in facts_to_collect'

- name: gather subman.virt.uuid fact
  raw: subscription-manager facts --list | grep '^virt.uuid.' | sed -n -e 's/^.*virt.uuid.\s*//p'
  register: subman_virt_uuid_cmd
  ignore_errors: yes
  become: yes
  when: 'have_subscription_manager and "subman.virt.uuid" in facts_to_collect'

- name: extract result value for subman.virt.uuid
  set_fact:
    subman_virt_uuid: "{{  subman_virt_uuid_cmd['stdout'] | trim | default('error') if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.virt.uuid" in facts_to_collect and "stdout" in subman_virt_uuid_cmd'

- name: handle failure value for subman.virt.is_guest
  set_fact:
    subman_virt_uuid: "{{ 'error' if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.virt.uuid" in facts_to_collect and "stdout" not in subman_virt_uuid_cmd'

- name: add subman.virt.uuid to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_virt_uuid }) }}"
  with_items:
  - 'subman.virt.uuid'
  when: '"subman.virt.uuid" in facts_to_collect'

- name: gather subman.has_facts_file fact
  raw: fact_count=$(ls /etc/rhsm/facts | grep .facts | wc -l); if [[ $fact_count > 0 ]]; then echo "Y"; else echo "N"; fi
  register: subman_has_facts_file
  ignore_errors: yes
  when: 'have_subscription_manager and "subman.has_facts_file" in facts_to_collect'

- name: add subman.has_facts_file to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_has_facts_file['stdout'] | trim | default('error') if have_subscription_manager else 'N/A (subscription-manager not found)' }) }}"
  with_items:
  - 'subman.has_facts_file'
  when: '"subman.has_facts_file" in facts_to_collect'

- name: gather subman.consumed fact
  raw: subscription-manager list --consumed | grep -e '^SKU' -e '^Subscription Name' | sed -n -e 's/SKU\s*.\s*//p' -e 's/Subscription Name\s*.\s*//p' | awk '{ ORS = (NR%2 ? " - " {{":"}} RS) } 1'
  register: subman_consumed_cmd
  ignore_errors: yes
  become: yes
  when: 'have_subscription_manager and "subman.consumed" in facts_to_collect'

- name: extract result value for subman.consumed
  set_fact:
    subman_consumed: "{{  subman_consumed_cmd['stdout'] | trim | default('error') if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.consumed" in facts_to_collect and "stdout" in subman_consumed_cmd'

- name: handle failure value for subman.consumed
  set_fact:
    subman_consumed: "{{ 'error' if have_subscription_manager else 'N/A (subscription-manager not found)' }}"
  when: '"subman.consumed" in facts_to_collect and "stdout" not in subman_consumed_cmd'

- name: add subman.consumed to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_consumed }) }}"
  with_items:
  - 'subman.consumed'
  when: '"subman.consumed" in facts_to_collect'