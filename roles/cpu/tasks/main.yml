---

- name: internal_host_started_processing_role
  set_fact:
    internal_host_started_processing_role: "cpu"

- name: gather cpu.vendor_id fact
  raw: cat /proc/cpuinfo | grep '^vendor_id\s*' | sed -n -e 's/^.*vendor_id\s*.\s*//p'
  register: cpu_vendor_id
  ignore_errors: yes

- name: gather cpu.model_name fact
  raw: cat /proc/cpuinfo | grep '^model name\s*.' | sed -n -e 's/^.*model name\s*.\s*//p'
  register: cpu_model_name
  ignore_errors: yes

- name: gather cpu.bogomips fact
  raw: cat /proc/cpuinfo | grep '^bogomips\s*.' | sed -n -e 's/^.*bogomips\s*.\s*//p'
  register: cpu_bogomips
  ignore_errors: yes

- name: gather cpu.cpu_family fact
  raw: cat /proc/cpuinfo | grep '^cpu family\s*.' | sed -n -e 's/^.*cpu family\s*.\s*//p'
  register: cpu_cpu_family
  ignore_errors: yes

- name: gather cpu.model_ver fact
  raw: cat /proc/cpuinfo | grep '^model\s*.' | sed -n -e 's/^.*model\s*.\s*//p'
  register: cpu_model_ver
  ignore_errors: yes

- name: gather cpu.count fact
  raw: cat /proc/cpuinfo | grep '^processor\s*.' | wc -l
  register: internal_cpu_count_cmd
  ignore_errors: yes

- name: extract or default cpu.count fact
  set_fact:
    cpu_count: "{{ internal_cpu_count_cmd | json_query('stdout_lines[0]') }}"

- name: gather cpu.core_per_socket fact
  raw: cat /proc/cpuinfo | grep '^cpu cores\s*.' | sed -n -e 's/^.*cpu cores\s*.\s*//p'
  register: internal_cpu_core_per_socket_cmd
  ignore_errors: yes

- name: extract or default cpu.core_per_socket fact
  set_fact:
    cpu_core_per_socket: "{{ internal_cpu_core_per_socket_cmd | json_query('stdout_lines[0]') }}"

- name: gather cpu.siblings fact
  raw: cat /proc/cpuinfo | grep '^siblings\s*.' | sed -n -e 's/^.*siblings\s*.\s*//p'
  register: internal_cpu_siblings_cmd
  ignore_errors: yes

- name: extract or default cpu.siblings fact
  set_fact:
    cpu_siblings: "{{ internal_cpu_siblings_cmd | json_query('stdout_lines[0]') }}"

- name: determine cpu.hyperthreading fact
  set_fact:
    cpu_hyperthreading: "{{ cpu_siblings != None and (cpu_siblings | int) == ((cpu_core_per_socket | int) * 2) }}"

- name: initialize cpu.socket_count fact
  set_fact:
      cpu_socket_count: "0"

- name: gather cpu.socket_count fact
  raw: /usr/sbin/dmidecode -t 4 | grep 'Socket Designation'| wc -l
  register: internal_cpu_socket_count_cmd
  become: yes
  ignore_errors: yes
  when: 'internal_have_dmidecode'

- name: extract result value for cpu.socket_count
  set_fact:
    cpu_socket_count: "{{ internal_cpu_socket_count_cmd['stdout'] | trim if internal_have_dmidecode else '' }}"
  when: '"stdout" in internal_cpu_socket_count_cmd'

- name: gather cpu.socket_count fact with fallback
  raw: cat /proc/cpuinfo | grep 'physical id' | sort -u | wc -l
  register: internal_cpu_socket_count_cmd
  ignore_errors: yes
  when: '"failed" in internal_cpu_socket_count_cmd and internal_cpu_socket_count_cmd["failed"] == true'

- name: extract result from internal_cpu_socket_count_cmd
  set_fact:
      cpu_socket_count: "{{ internal_cpu_socket_count_cmd['stdout_lines'][0] }}"
  when: '"stdout_lines" in internal_cpu_socket_count_cmd'

- name: assume cpu.socket_count equals 1 if result is 0
  set_fact:
      cpu_socket_count: "{{ cpu_count }}"
  when: 'cpu_socket_count == "0"'

- name: calculate cpu.core_count
  set_fact:
    cpu_core_count: "{{ (cpu_core_per_socket | int) *  (cpu_socket_count | int)}}"
  when: 'cpu_core_per_socket is defined and cpu_core_per_socket'

- name: calculate cpu.core_count fallback no hyperthreading
  set_fact:
    cpu_core_count: "{{ cpu_count }}"
  when: 'cpu_core_per_socket is defined and not cpu_core_per_socket and not cpu_hyperthreading'

- name: calculate cpu.core_count fallback with hyperthreading
  set_fact:
    cpu_core_count: "{{ (cpu_count | int) /  2 }}"
  when: 'cpu_core_per_socket is defined and not cpu_core_per_socket and cpu_hyperthreading'

- name: set cpu.core_count to cpu_count if vmware
  set_fact:
    cpu_core_count: "{{ (cpu_count | int) }}"
  when: '"cpu_count is defined and virt_type is defined and virt_type == "vmware"'

- name: default cpu.core_count to error if it doesn't exists
  set_fact:
    cpu_core_count: ""
  when: 'cpu_core_count is not defined'
