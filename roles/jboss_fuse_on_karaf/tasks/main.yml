---

# Tasks that can locate a KARAF_HOME directory
    - name: Gather jboss.fuse-on-karaf.running-paths
      # This command deserves some explanation.

      # ps -A -o args: list all of the processes. It's important
      # for the next step that the executable name is the first
      # thing on the command line, which '-o args' does.

      # egrep ... : we are about to look for processes with
      # 'karaf.base' and 'karaf.home' in their command
      # line. Unfortunately, our sed process and the shell that is
      # running our pipeline both qualify. The ^sed excludes sed, and
      # the '\| sed' excludes the shell.

      # sed ...: get the value of command-line arguments of the form
      # '-Dkaraf.base=...' and '-Dkaraf.home=...'. The Karaf
      # documentation says that karaf.base defaults to karaf.home, but
      # there's no documentation of what goes where if they're
      # different, so we check both.

      # xargs -n 1 realpath: normalize home directory paths so the
      # 'unique' below really does deduplicate them. Without realpath,
      # we get duplicate karaf_home entries when one has a trailing
      # slash and the other doesn't, even without actual symlinks.

      raw: ps -A -o args | egrep --invert-match '(^sed)|(\| sed)' | sed -n -e 's/.*-Dkaraf.base=\([^[:space:]]*\).*/\1/pg;s/.*-Dkaraf.home=\([^[:space:]]*\).*/\1/pg' | xargs -n 1 realpath 2> /dev/null
      register: karaf_running_processes
      ignore_errors: yes

    - name: Use locate to look for karaf.jar

      # We look for karaf.jar. We expect that it will be located at
      # $KARAF_HOME/lib/karaf.jar, so strip off the lib/karaf.jar part
      # to get the KARAF_HOME. Just like the last task, we also use
      # realpath to normalize paths.

      raw: locate karaf.jar | sed -n -e 's/\(.*\)lib\/karaf\.jar$/\1/p' | xargs -n 1 realpath  2> /dev/null
      register: karaf_locate_karaf_jar
      ignore_errors: yes
      when: 'have_locate'

    - name: Use find to look for karaf.jar
      raw: find {{scan_dirs}} -xdev -type f -name karaf.jar 2> /dev/null | sed -n -e 's/\(.*\)lib\/karaf\.jar$/\1/p' | xargs -n 1 realpath  2> /dev/null | sort -u
      register: karaf_find_karaf_jar
      ignore_errors: yes
      when: false

# Combine the outputs of the above into a single fact

    - name: combine KARAF_HOME candidates into single list
      set_fact:
          karaf_homes: "{{
              (karaf_running_processes.get('stdout_lines', []) +
               karaf_locate_karaf_jar.get('stdout_lines', []) +
               karaf_find_karaf_jar.get('stdout_lines', [])) | unique }}"
      ignore_errors: yes

# Look for fuse inside KARAF_HOME directories

    - name: check bin/fuse
      raw: ls -1 "{{ item }}/bin/fuse"
      register: karaf_home_bin_fuse
      ignore_errors: yes
      with_items: "{{ karaf_homes }}"

    - name: check system/org/jboss/fuse
      raw: ls -1 "{{ item }}/system/org/jboss"
      register: karaf_home_system_org_jboss
      ignore_errors: yes
      with_items: "{{ karaf_homes }}"

# Tests that can indicate the presence of Fuse, but can't tell us the
# KARAF_HOME (or even whether it's Fuse-on-Karaf or Fuse-on-EAP).

    - name: look for fuse systemd service
      raw: systemctl list-unit-files | grep fuse
      register: jboss_fuse_systemctl_unit_files
      ignore_errors: yes
      become: true

    - name: look for fuse in chkconfig
      raw: chkconfig 2> /dev/null | grep fuse
      register: jboss_fuse_chkconfig
      ignore_errors: yes
      become: true
