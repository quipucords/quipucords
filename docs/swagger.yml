swagger: "2.0"
info:
  description: "The models and API for the Quipucords server."
  version: "1.0.0"
  title: "Quipucords API"
  contact:
    email: "quipucords@redhat.com"
  license:
    name: "GPL 3.0"
    url: "https://www.gnu.org/licenses/gpl-3.0.txt"

basePath: "/api/v1"

schemes:
  - http
  - https
securityDefinitions:
  Token:
    type: apiKey
    name: Authorization
    in: header
security:
  - Token: []

tags:
- name: "Credential"
  description: "API related to the Credential model"
- name: "Source"
  description: "API related to the Source model"
- name: "Scan"
  description: "API related to the Scan model"
- name: "Scan Job"
  description: "API related to the Scan Job model"
- name: "Report"
  description: "API related to the Report model"
- name: "Fact"
  description: "API related to the Fact model"
- name: "User"
  description: "API related to the User model"
- name: "Status"
  description: "API related to the server status"

paths:
  /credentials/:
    post:
      tags:
        - "Credential"
      summary: "Add a new credential"
      description: "Create a new credential for use when connecting to target systems"
      operationId: "addCredential"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Credential object that needs to be stored"
        required: true
        schema:
          $ref: "#/definitions/Credential"
      responses:
        201:
          description: "Credential created"
          schema:
            $ref: "#/definitions/CredentialOut"
        400:
          description: "Invalid request"
        401:
          description: "Not authorized"
    get:
      tags:
        - "Credential"
      summary: "List exsiting credentials"
      description: "List all credential."
      operationId: "listCredentials"
      produces:
      - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "Filter credentials by a list of names"
          type: "string"
        - name: "cred_type"
          in: "query"
          description: "Filter list based on credential type"
          type: "string"
          enum:
            - network
            - vcenter
            - satellite
        - name: "page"
          in: "query"
          description: "Value for selecting a page of results"
          type: "integer"
          format: "int64"
        - name: "page_size"
          in: "query"
          description: "Value for the maximum number of results per page"
          type: "integer"
          format: "int64"
        - name: "ordering"
          in: "query"
          description: "Order the results with the field name; '-' means descending"
          type: "string"
        - name: "search_by_name"
          in: "query"
          description: "Partial match search of credentials by name"
          type: "string"
      responses:
        200:
          description: "Credentials retrieved"
          schema:
            $ref: "#/definitions/CredentialPagination"
        401:
          description: "Not authorized"
  /credentials/{cred_id}/:
    get:
      tags:
        - "Credential"
      summary: "Get an existing credential"
      description: "Retreive a credential by id"
      operationId: "getCredential"
      produces:
      - "application/json"
      parameters:
      - name: "cred_id"
        in: "path"
        description: "ID of credential to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Credential retrieved"
          schema:
            $ref: "#/definitions/CredentialOut"
        401:
          description: "Not authorized"
        404:
          description: "Credential not found"
    put:
      tags:
        - "Credential"
      summary: "Full update of an existing credential"
      description: "Full update of an existing credential"
      operationId: "updateCredential"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cred_id"
        in: "path"
        description: "ID of credential to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Credential object to replace existing credential object"
        required: true
        schema:
          $ref: "#/definitions/Credential"
      responses:
        200:
          description: "Credential updated"
          schema:
            $ref: "#/definitions/CredentialOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
        404:
          description: "Credential not found"
    patch:
      tags:
        - "Credential"
      summary: "Partial update of an existing credential"
      description: "Partial update of an existing credential"
      operationId: "partialUpdateCredential"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cred_id"
        in: "path"
        description: "ID of credential to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Credential fields to update"
        required: true
        schema:
          $ref: "#/definitions/Credential"
      responses:
        200:
          description: "Credential updated"
          schema:
            $ref: "#/definitions/CredentialOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
        404:
          description: "Credential not found"
    delete:
      tags:
        - "Credential"
      summary: "Delete an existing credential"
      description: "Delete a credential by id"
      operationId: "deleteCredential"
      produces:
      - "application/json"
      parameters:
      - name: "cred_id"
        in: "path"
        description: "ID of credential to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Credential deleted"
        400:
          description: "Credential is used by existing sources"
          schema:
            $ref: "#/definitions/CredentialDeletionError"
        401:
          description: "Not authorized"
        404:
          description: "Credential not found"
  /sources/:
    post:
      tags:
        - "Source"
      summary: "Add a new source"
      description: "Create a new source for scanning"
      operationId: "addSource"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "JSON object representing new source"
          required: true
          schema:
            $ref: "#/definitions/SourceIn"
        - in: "query"
          name: "scan"
          type: "boolean"
          description: "Query parameter for optional connection scan upon source creation"
          required: false
      responses:
        201:
          description: "Source created"
          schema:
            $ref: "#/definitions/SourceOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
    get:
      tags:
        - "Source"
      summary: "List sources"
      description: "List all sources available for scanning"
      operationId: "listSources"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "A list of names representing sources"
          type: "string"
        - name: "source_type"
          in: "query"
          description: "Filter list based on source type"
          type: "string"
          enum:
            - network
            - vcenter
            - satellite
        - name: "page"
          in: "query"
          description: "Value for selecting a page of results"
          type: "integer"
          format: "int64"
        - name: "page_size"
          in: "query"
          description: "Value for the maximum number of results per page"
          type: "integer"
          format: "int64"
        - name: "ordering"
          in: "query"
          description: "Order the results with the field name; '-' means descending"
          type: "string"
        - name: "search_by_name"
          in: "query"
          description: "Partial match search of sources by name"
          type: "string"
        - name: "search_credentials_by_name"
          in: "query"
          description: "Partial match search of source credentials by name"
          type: "string"
      responses:
        200:
          description: "Sources retrieved"
          schema:
            $ref: "#/definitions/SourcePagination"
        401:
          description: "Not authorized"
  /sources/{source_id}/:
    get:
      tags:
        - "Source"
      summary: "Get a source"
      description: "Get a source."
      operationId: "getSource"
      produces:
        - "application/json"
      parameters:
        - name: "source_id"
          in: "path"
          description: "ID of source to retrieve"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Source returned"
          schema:
            $ref: "#/definitions/SourceOut"
        401:
          description: "Not authorized"
        404:
          description: "Source not found"
    put:
      tags:
        - "Source"
      summary: "Full update of an existing source"
      description: "Full update of an existing source"
      operationId: "updateSource"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "source_id"
          in: "path"
          description: "ID of source to update"
          required: true
          type: "number"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Source object to replace existing source object"
          required: true
          schema:
            $ref: "#/definitions/SourceIn"
      responses:
        200:
          description: "Source updated"
          schema:
            $ref: "#/definitions/SourceOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
        404:
          description: "No source found"
    patch:
      tags:
        - "Source"
      summary: "Partial update of an existing source"
      description: "Partial update of an existing source"
      operationId: "partialUpdateSource"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "source_id"
          in: "path"
          description: "ID of source to update"
          required: true
          type: "number"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Source fields to update"
          required: true
          schema:
            $ref: "#/definitions/SourceIn"
      responses:
        200:
          description: "Source updated"
          schema:
            $ref: "#/definitions/SourceOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
        404:
          description: "No source found"
    delete:
      tags:
        - "Source"
      summary: "Delete an existing source"
      description: "Delete an existing source"
      operationId: "deleteSource"
      produces:
        - "application/json"
      parameters:
        - name: "source_id"
          in: "path"
          description: "ID of source to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "Source deleted"
        400:
          description: "Source is used by existing scans"
          schema:
            $ref: "#/definitions/SourceDeletionError"
        401:
          description: "Not authorized"
        404:
          description: "Source not found"
  /scans/:
    post:
      tags:
        - "Scan"
      summary: "Create a scan"
      description: "Create a new scan"
      operationId: "createScan"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Scan object that defines a scan"
        required: true
        schema:
          $ref: "#/definitions/ScanIn"
      responses:
        201:
          description: "Scan created"
          schema:
            $ref: "#/definitions/ScanOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
    get:
      tags:
        - "Scan"
      summary: "List exsiting scans"
      description: "List all scans."
      operationId: "listScan"
      produces:
        - "application/json"
      parameters:
        - name: "scan_type"
          in: "query"
          description: "Filter list based on scan type"
          type: "string"
          enum:
            - connect
            - inspect
        - name: "page"
          in: "query"
          description: "Value for selecting a page of results"
          type: "integer"
          format: "int64"
        - name: "page_size"
          in: "query"
          description: "Value for the maximum number of results per page"
          type: "integer"
          format: "int64"
        - name: "ordering"
          in: "query"
          description: "Order the results with the field name; '-' means descending"
          type: "string"
        - name: "search_by_name"
          in: "query"
          description: "Partial match search of scans by name"
          type: "string"
        - name: "search_sources_by_name"
          in: "query"
          description: "Partial match search of scan sources by name"
          type: "string"
      responses:
        200:
          description: "Scans retrieved"
          schema:
            $ref: "#/definitions/ScanPagination"
        401:
          description: "Not authorized"
  /scans/{scan_id}/:
    get:
      tags:
        - "Scan"
      summary: "Get an existing scan"
      description: "Get a scan's current definition"
      operationId: "getScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_id"
        in: "path"
        description: "ID of scan to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job retrieved"
          schema:
            $ref: "#/definitions/ScanOut"
        401:
          description: "Not authorized"
        404:
          description: "Scan not found"
    put:
      tags:
        - "Scan"
      summary: "Full update of an existing scan"
      description: "Full update of an existing scan"
      operationId: "updateScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_id"
        in: "path"
        description: "ID of scan to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scan object to replace existing scan object"
        required: true
        schema:
          $ref: "#/definitions/ScanIn"
      responses:
        200:
          description: "Scan job updated"
          schema:
            $ref: "#/definitions/ScanOut"
        401:
          description: "Not authorized"
        404:
          description: "Scan not found"
    patch:
      tags:
        - "Scan"
      summary: "Partial update of an existing scan"
      description: "Partial update of an existing scan"
      operationId: "partialUpdateScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_id"
        in: "path"
        description: "ID of scan to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scan fields to update"
        required: true
        schema:
          $ref: "#/definitions/ScanIn"
      responses:
        200:
          description: "Scan job updated"
          schema:
            $ref: "#/definitions/ScanOut"
        401:
          description: "Not authorized"
        404:
          description: "Scan not found"
    delete:
      tags:
        - "Scan"
      summary: "Delete an existing scan"
      description: "Delete a scan"
      operationId: "deleteScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_id"
        in: "path"
        description: "ID of scan to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Scan deleted"
        401:
          description: "Not authorized"
        404:
          description: "Scan not found"
  /scans/{scan_id}/jobs/:
    post:
      tags:
        - "Scan Job"
      summary: "Trigger a scan"
      description: "Create a new scan job"
      operationId: "triggerScan"
      produces:
      - "application/json"
      parameters:
        - name: "scan_id"
          in: "path"
          description: "Scan used to create job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        201:
          description: "Scan job created"
          schema:
            $ref: "#/definitions/ScanJobOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
    get:
      tags:
        - "Scan Job"
      summary: "List exsiting scan jobs"
      description: "List all scans jobs for a specific scan"
      operationId: "listScanJobs"
      produces:
        - "application/json"
      parameters:
        - name: "scan_id"
          in: "path"
          description: "ID of scan used in search"
          required: true
          type: "integer"
          format: "int64"
        - name: "status"
          in: "query"
          description: "Filter list based on job status"
          type: "string"
          enum:
            - created
            - pending
            - running
            - paused
            - canceled
            - completed
            - failed
        - name: "scan_type"
          in: "query"
          description: "Filter list based on scan type"
          type: "string"
          enum:
            - connect
            - inspect
        - name: "page"
          in: "query"
          description: "Value for selecting a page of results"
          type: "integer"
          format: "int64"
        - name: "page_size"
          in: "query"
          description: "Value for the maximum number of results per page"
          type: "integer"
          format: "int64"
        - name: "ordering"
          in: "query"
          description: "Order the results with the field name; '-' means descending"
          type: "string"
      responses:
        200:
          description: "Scan jobs retrieved"
          schema:
            $ref: "#/definitions/ScanJobPagination"
        401:
          description: "Not authorized"
  /jobs/{scan_job_id}/:
    get:
      tags:
        - "Scan Job"
      summary: "Get an existing scan job"
      description: "Get a scan job's current status"
      operationId: "getScanJob"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job used in search"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job retrieved"
          schema:
            $ref: "#/definitions/ScanJobOut"
        401:
          description: "Not authorized"
        404:
          description: "Scan job not found"
  /jobs/{scan_job_id}/connection/:
    get:
      tags:
        - "Scan Job"
      summary: "Get the connection results of existing scan job"
      description: "Get the connection results of a scan"
      operationId: "getScanConnectionResults"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job used in search"
        required: true
        type: "integer"
        format: "int64"
      - name: "ordering"
        in: "query"
        description: "Order the results with the field name; '-' means descending"
        type: "string"
        enum:
          - "name"
          - "status"
          - "-name"
          - "-status"
      - name: "status"
        in: "query"
        description: "Filter list based on result status"
        type: "string"
        enum:
          - success
          - failed
          - unreachable
      - name: "source_id"
        in: "query"
        description: "Filter list based on result source identifier"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job connection results retrieved"
          schema:
            $ref: "#/definitions/ScanJobConnectionResultsOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
        404:
          description: "Scan job connection results not found"
  /jobs/{scan_job_id}/inspection/:
    get:
      tags:
        - "Scan Job"
      summary: "Get the inspection results of existing scan job"
      description: "Get the inspection results of a scan"
      operationId: "getScanInspectionResults"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job used in search"
        required: true
        type: "integer"
        format: "int64"
      - name: "ordering"
        in: "query"
        description: "Order the results with the field name; '-' means descending"
        type: "string"
        enum:
          - "name"
          - "status"
          - "-name"
          - "-status"
      - name: "status"
        in: "query"
        description: "Filter list based on result status"
        type: "string"
        enum:
          - success
          - failed
          - unreachable
      - name: "source_id"
        in: "query"
        description: "Filter list based on result source identifier"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job inspection results retrieved"
          schema:
            $ref: "#/definitions/ScanJobInspectionResultsOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
        404:
          description: "Scan job inspection results not found"
  /jobs/{scan_job_id}/pause/:
    put:
      tags:
        - "Scan Job"
      summary: "Pauses an existing scan job"
      description: "Pauses a scan if it is currently running, fails otherwise"
      operationId: "pauseScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job to pause"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job paused"
          schema:
            $ref: "#/definitions/ScanJobOut"
        400:
          description: "Scan job not running"
        401:
          description: "Not authorized"
        404:
          description: "Scan job not found"
  /jobs/{scan_job_id}/cancel/:
    put:
      tags:
        - "Scan Job"
      summary: "Cancels an existing scan job"
      description: "Cancels a scan if it has not finished, fails otherwise"
      operationId: "cancelScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job to cancel"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job canceled"
          schema:
            $ref: "#/definitions/ScanJobOut"
        400:
          description: "Scan job has already finished"
        401:
          description: "Not authorized"
        404:
          description: "Scan job not found"
  /jobs/{scan_job_id}/restart/:
    put:
      tags:
        - "Scan Job"
      summary: "Restarts an existing scan job"
      description: "Restarts a scan if it has been paused, fails otherwise"
      operationId: "restartScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job to restart"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job restarted"
          schema:
            $ref: "#/definitions/ScanJobOut"
        400:
          description: "Scan job was not in paused state"
        401:
          description: "Not authorized"
        404:
          description: "Scan job not found"
  /jobs/merge/:
    put:
      tags:
        - "Scan Job"
      summary: "Merge results from multiple scan jobs"
      description: "Merge results from two or more completed scan jobs"
      operationId: "mergeJobResults"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Scan jobs to combine"
        required: true
        schema:
          $ref: "#/definitions/ScanJobMerge"
      responses:
        201:
          description: "Scan job results merged and fact collection created"
          schema:
            $ref: "#/definitions/FactCollectionOut"
        400:
          description: "Scan job not merged due to invalid request"
        401:
          description: "Not authorized"
  /reports/{report_id}/details/:
    get:
      tags:
        - "Report"
      summary: "Retrieve a detailed report for systems scanned"
      description: "Get detailed report for systems that have been scanned"
      operationId: "getDetailReport"
      produces:
      - "application/json"
      - "text/csv"
      parameters:
      - name: "report_id"
        in: "path"
        description: "The Report ID to be queried"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Detailed report successfully retrieved"
          schema:
            $ref: "#/definitions/FactCollectionOut"
        401:
          description: "Not authorized"
        404:
          description: "Report for report id not found"
  /reports/{report_id}/deployments/:
    get:
      tags:
        - "Report"
      summary: "Retrieve a deployment report for systems scanned"
      description: "Get deployment report for systems that have been scanned"
      operationId: "getDeploymentReport"
      produces:
      - "application/json"
      - "text/csv"
      parameters:
        - name: "report_id"
          in: "path"
          description: "The Report ID to be queried"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Deployment report for scanned systems retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SystemReportOut"
        401:
          description: "Not authorized"
        404:
          description: "Report for report id not found"
  /facts/:
    post:
      tags:
        - "Fact"
      summary: "Publish facts from environment scans"
      description: "Publish facts from environment scans"
      operationId: "publishFacts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Facts that need to be stored"
        required: true
        schema:
          $ref: "#/definitions/FactCollectionIn"
      responses:
        201:
          description: "Fact collection created"
          schema:
            $ref: "#/definitions/FactCollectionOut"
        400:
          description: "Invalid input"
        401:
          description: "Not authorized"
  /token/:
    post:
      tags:
        - "User"
      summary: "Obtain a user token."
      description: "Obtain a user token."
      operationId: "obtainToken"
      security: []
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Credentials used to obtain token"
        required: true
        schema:
          $ref: "#/definitions/ObtainTokenIn"
      responses:
        200:
          description: "Successfully obtained token."
          schema:
            $ref: "#/definitions/ObtainTokenOut"
        400:
          description: "Unable to log in with provided credentials."
  /users/current/:
    get:
      tags:
        - "User"
      summary: "Gets the username of the current user"
      description: "Gets the username of the currently authenticated user"
      operationId: "currentUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "Current username"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
  /users/logout/:
    put:
      tags:
        - "User"
      summary: "Logs out the current user"
      description: "Logs out the currently authenticated user"
      operationId: "logoutUser"
      responses:
        200:
          description: "logged out"
        401:
          description: "Unauthorized"
  /status/:
    get:
      tags:
        - "Status"
      summary: "Provides endpoint for server status"
      description: "Server status and setup information."
      operationId: "serverStatus"
      security: []
      responses:
        200:
          description: "Server status"
          schema:
            $ref: "#/definitions/ServerStatus"
definitions:
  Credential:
    type: "object"
    required:
      - name
      - username
      - password
      - ssh_keyfile
    properties:
        name:
          type: "string"
          description: "The name of the credential"
          example: "DevelopmentCred"
        cred_type:
          type: "string"
          description: "The type of the credential"
          enum:
            - network
            - vcenter
            - satellite
        username:
          type: "string"
          example: "admin"
          description: "The connection username for the credential"
        password:
          type: "string"
          example: "********"
          description: "The connection password for the credential"
        ssh_keyfile:
          type: "string"
          example: "~/.ssh/id_rsa"
          description: "The connection private ssh keyfile for the credential"
        ssh_passphrase:
          type: "string"
          example: "********"
          description: "The passphrase for the ssh keyfile"
        become_method:
          type: "string"
          description: "The method to become for ansible privilege escalation"
          enum:
            - sudo
            - su
            - pbrun
            - pfexec
            - doas
            - dzdo
            - ksu
            - runas
        become_user:
          type: "string"
          example: "admin"
          description: "The user to become when running a privileged command during network scan."
        become_password:
          type: "string"
          example: "********"
          description: "The privilege escalation password to be used when running a network scan."
        sources:
          type: "array"
          items:
            $ref: "#/definitions/SourceMin"
  CredentialDeletionError:
    allOf:
      - $ref: "#/definitions/DeletionError"
      - type: "object"
        required:
          - sources
        properties:
          results:
            type: "array"
            items:
              $ref: "#/definitions/SourceMin"
            description: "The list of sources"
  CredentialMin:
    type: "object"
    required:
      - id
      - name
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 15
      name:
        type: "string"
        description: "The name of the credential"
        example: "TestEnvCredential"
  CredentialOut:
    allOf:
      - $ref: "#/definitions/Credential"
      - type: "object"
        required:
          - id
        properties:
          id:
            type: "integer"
            format: "int64"
            example: 54
  CredentialPagination:
    allOf:
      - $ref: "#/definitions/ListPagination"
      - type: "object"
        required:
          - results
        properties:
          results:
            type: "array"
            items:
              $ref: "#/definitions/CredentialOut"
            description: "The paginated credentials"
  DeletionError:
    type: "object"
    required:
      - detail
    properties:
      detail:
        type: "string"
        description: "Deletion error message"
        example: "Failed to delete"
  FactCollectionIn:
    type: "object"
    required:
      - sources
    properties:
        sources:
          type: "array"
          items:
            $ref: "#/definitions/FactCollectionSource"
          minItems: 1
  FactCollectionOut:
    type: "object"
    required:
      - id
      - sources
    properties:
        id:
          type: "integer"
          format: "int64"
          description: "The fact collection identifier"
          example: 15
        sources:
          type: "array"
          items:
            $ref: "#/definitions/FactCollectionSource"
          minItems: 1
  FactCollectionSource:
    type: "object"
    required:
      - source_id
      - source_type
      - facts
    properties:
      source_id:
        type: "integer"
        description: "The source id associated with these facts"
        example: 12
      source_type:
        type: "string"
        description: "The source type associated with these facts"
        enum:
          - network
          - vcenter
          - satellite
      facts:
        type: "array"
        items:
          $ref: "#/definitions/SystemFact"
        description: "The facts associated with this source"
        minItems: 1
  ListPagination:
    type: "object"
    required:
      - count
      - next
      - previous
    properties:
      count:
        type: "integer"
        format: "int64"
        description: "Total number of credentials"
        example: 3
      next:
        type: "string"
        description: "URL for next page of results"
        example: "http://localhost:8000/api/v1/scans/?page=3"
      previous:
        type: "string"
        description: "URL for previous page of results"
        example: "http://localhost:8000/api/v1/scans/?page=1"
  ObtainTokenIn:
    type: "object"
    required:
      - username
      - password
    properties:
      username:
        type: "string"
        description: "Authentication username."
        example: "admin"
      password:
        type: "string"
        description: "Authentication password."
        example: "password"
  ObtainTokenOut:
    type: "object"
    required:
      - token
    properties:
      token:
        type: "string"
        example: "7f7f81baaa26aeaf46a907e017fbec9e19ff474d"
        description: "Authentication token."
  RawFactsOut:
    type: "object"
    required:
      - name
      - value
    properties:
      name:
        type: "string"
        description: "The raw fact name."
        example: "etc_release_name"
      value:
        type: "string"
        description: "The raw fact value"
        example: "Red Hat Enterprise Linux Server"
  Scan:
    type: "object"
    properties:
        scan_type:
          type: "string"
          description: "The type of scan"
          enum:
            - inspect
            - connect
          default: "connect"
        options:
          $ref: "#/definitions/ScanOptions"
  ScanDisableOptionalProducts:
    type: "object"
    properties:
      jboss_eap:
        type: "boolean"
        description: "The setting for JBoss EAP"
        default: false
      jboss_fuse:
        type: "boolean"
        description: "The setting for JBoss Fuse"
        default: false
      jboss_brms:
        type: "boolean"
        description: "The setting for JBoss Fuse"
        default: false
  ScanExtendedSearchProducts:
    type: "object"
    properties:
      jboss_eap:
        type: "boolean"
        description: "The setting for JBoss EAP"
        default: false
      jboss_fuse:
        type: "boolean"
        description: "The setting for JBoss Fuse"
        default: false
      jboss_brms:
        type: "boolean"
        description: "The setting for JBoss Fuse"
        default: false
      search_directories:
        type: "array"
        items:
          type: "string"
          example: "/"
        description: "Search directories for the find command"
  ScanIn:
    allOf:
      - $ref: "#/definitions/Scan"
      - type: "object"
        required:
          - sources
        properties:
          sources:
            type: "array"
            items:
              type: "integer"
              format: "int64"
              example: 4
            description: "The list of source identifiers"
  ScanJob:
    type: "object"
    properties:
        scan_type:
          type: "string"
          description: "The type of scan"
          enum:
            - inspect
            - connect
          default: "connect"
        options:
          $ref: "#/definitions/ScanOptions"
  ScanJobConnectionResultsOut:
    allOf:
      - $ref: "#/definitions/ListPagination"
      - type: "object"
        required:
          - results
        properties:
            results:
              type: "array"
              items:
                $ref: "#/definitions/SystemConnectResultOut"
              description: "The task connection results"
  ScanJobInspectionResultsOut:
    allOf:
      - $ref: "#/definitions/ListPagination"
      - type: "object"
        required:
          - results
        properties:
            results:
              type: "array"
              items:
                $ref: "#/definitions/SystemInspectResultOut"
              description: "The task inspection results"
  ScanJobMerge:
    type: "object"
    properties:
      jobs:
        type: "array"
        items:
          type: "integer"
        example: [1,2,3]
  ScanJobMin:
    type: "object"
    required:
      - id
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 2
      report_id:
        type: "integer"
        format: "int64"
        example: 15
  ScanJobMostRecent:
    type: "object"
    required:
      - id
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 42
      report_id:
        type: "integer"
        format: "int64"
        example: 3
      start_time:
        type: "string"
        format: "date-time"
      end_time:
        type: "string"
        format: "date-time"
      systems_count:
        type: "integer"
        format: "int64"
        example: 21
      systems_scanned:
        type: "integer"
        format: "int64"
        example: 20
      systems_failed:
        type: "integer"
        format: "int64"
        example: 1
      status:
        type: "string"
        description: "The status of the scan"
        example: "completed"
        enum:
          - created
          - pending
          - running
          - paused
          - canceled
          - failed
          - completed
      scan_type:
        type: "string"
        description: "The type of scan"
        example: "inspect"
        enum:
          - connect
          - inspect
      status_details:
        type: "object"
        properties:
          job_status_message:
            type: "string"
            example: "Job is complete."
  ScanJobOut:
    allOf:
      - $ref: "#/definitions/ScanJob"
      - type: "object"
        required:
          - id
          - sources
        properties:
          id:
            type: "integer"
            format: "int64"
            example: 15
          status:
            type: "string"
            description: "The status of the scan."
            enum:
              - created
              - pending
              - running
              - paused
              - canceled
              - failed
              - completed
          sources:
            type: "array"
            items:
              $ref: "#/definitions/SourceMin"
            description: "The list of sources"
          tasks:
            type: "array"
            items:
              $ref: "#/definitions/ScanTask"
            description: "The scan tasks being processed"
          start_time:
            type: "string"
            format: "date-time"
          end_time:
            type: "string"
            format: "date-time"
          systems_count:
            type: "integer"
            format: "int64"
            description: "The total number of systems to be scanned"
            example: 20
          systems_scanned:
            type: "integer"
            format: "int64"
            description: "The total number of systems that have been scanned"
            example: 10
          systems_failed:
            type: "integer"
            format: "int64"
            description: "The total number of systems that failed to scan"
            example: 10
          report_id:
            type: "integer"
            format: "int64"
            description: "The fact collection identifier"
            example: 2
  ScanJobPagination:
    allOf:
      - $ref: "#/definitions/ListPagination"
      - type: "object"
        required:
          - results
        properties:
          results:
            type: "array"
            items:
              $ref: "#/definitions/ScanJobOut"
            description: "The paginated scan jobs"
  ScanMin:
    type: "object"
    required:
      - id
      - name
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 4
      name:
        type: "string"
        description: "The name of the scan"
        example: "WeeklyScan"
  ScanOptions:
    type: "object"
    properties:
      max_concurrency:
        type: "integer"
        format: "int64"
        description: "The maximum concurrent host scans"
        example: 50
        default: 50
      disabled_optional_products:
        $ref: "#/definitions/ScanDisableOptionalProducts"
      enabled_extended_product_search:
        $ref: "#/definitions/ScanExtendedSearchProducts"
  ScanOut:
    allOf:
      - type: "object"
        required:
          - id
          - sources
        properties:
          id:
            type: "integer"
            format: "int64"
            example: 4
          sources:
            type: "array"
            items:
              $ref: "#/definitions/SourceMin"
            description: "The list of sources"
          jobs:
            type: "array"
            items:
              $ref: "#/definitions/ScanJobMin"
          most_recent:
            $ref: "#/definitions/ScanJobMostRecent"
      - $ref: "#/definitions/Scan"
  ScanPagination:
    allOf:
      - $ref: "#/definitions/ListPagination"
      - type: "object"
        required:
          - results
        properties:
          results:
            type: "array"
            items:
              $ref: "#/definitions/ScanOut"
            description: "The paginated scan"
  ScanTask:
    type: "object"
    properties:
      source:
        type: "integer"
        format: "int64"
        description: "The identifier of the source."
        example: 1
      scan_type:
        type: "string"
        description: "The type of scan task."
        enum:
          - inspect
          - connect
      status:
        type: "string"
        description: "The status of the scan task."
        enum:
          - created
          - pending
          - running
          - paused
          - canceled
          - failed
          - completed
      start_time:
        type: "string"
        format: "date-time"
      end_time:
        type: "string"
        format: "date-time"
      systems_count:
        type: "integer"
        format: "int64"
        description: "The total number of systems to be scanned in the taks."
        example: 20
      systems_scanned:
        type: "integer"
        format: "int64"
        description: "The total number of systems that have been scanned in the task."
        example: 10
      systems_failed:
        type: "integer"
        format: "int64"
        description: "The total number of systems that failed during the scan task."
        example: 10
  ServerStatus:
    type: "object"
    properties:
      api_version:
        type: "integer"
        format: "int64"
        description: "API version number"
        example: 1
      build:
        type: "string"
        description: "The build number"
        example: "17de132"
      server_address:
        type: "string"
        description: "The ip and port information"
        example: "127.0.0.1:8000"
      python:
        type: "string"
        description: "The python string version"
        example: "3.6.1"
      modules:
        type: "object"
        description: "name/version string pairs describing the modules on the server"
        example: {"ansible": "2.3.2.0", "django": "1.11.5", "rest_framework": "3.4.6"}
      platform:
        type: "object"
        description: "name/value string pairs describing the server"
        example: {"system": "Fedora", "node": "26aec4157585", "release": "26", "version": "Fedora 26", "machine": "x86_64", "processor": "i386"}
  Source:
    type: "object"
    required:
      - name
      - source_type
      - hosts
      - port
    properties:
      name:
        type: "string"
        description: "The name of the source"
        example: "TestSource"
      source_type:
        type: "string"
        description: "The type of the source"
        enum:
          - network
          - vcenter
          - satellite
      port:
        type: "integer"
        format: "int32"
        description: "The port to use on the host(s)."
        example: 22
      hosts:
        type: "array"
        items:
          type: "string"
          example: "192.168.0.1"
        description: "The host(s) to scan.Can be an IP or hostname for vcenter/satellite; or ips, hostnames or IP ranges for network."
  SourceDeletionError:
    allOf:
      - $ref: "#/definitions/DeletionError"
      - type: "object"
        required:
          - scans
        properties:
          results:
            type: "array"
            items:
              $ref: "#/definitions/ScanMin"
            description: "The list of scans"
  SourceIn:
    allOf:
      - $ref: "#/definitions/Source"
      - type: "object"
        required:
          - credentials
        properties:
          credentials:
            type: "array"
            items:
              type: "integer"
              format: "int64"
              example: 15
            description: "The credentials to try with these hosts."
          options:
            $ref: "#/definitions/SourceOptions"
  SourceMin:
    type: "object"
    required:
      - id
      - name
      - source_type
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 15
      name:
        type: "string"
        description: "The name of the source"
        example: "TestSource"
      source_type:
        type: "string"
        description: "The type of the source"
        enum:
          - network
          - vcenter
          - satellite
  SourceMostRecentConnectionJob:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      report_id:
        type: "integer"
        format: "int64"
        example: 3
      start_time:
        type: "string"
        format: "date-time"
      end_time:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "The status of the scan job."
        enum:
          - created
          - pending
          - running
          - paused
          - canceled
          - failed
          - completed
        example: "completed"
      status_details:
        type: "object"
        properties:
          job_status_message:
            type: "string"
            example: "Job is complete."
      systems_count:
        type: "integer"
        format: "int64"
        description: "The total number of systems to be scanned in the scan job."
        example: 10
      systems_scanned:
        type: "integer"
        format: "int64"
        description: "The total number of successful system connections in the scan job."
        example: 8
      systems_failed:
        type: "integer"
        format: "int64"
        description: "The total number of failed system connections for the scan job."
        example: 2
      source_systems_count:
        type: "integer"
        format: "int64"
        description: "The total number of systems to be scanned in the source."
        example: 5
      source_systems_scanned:
        type: "integer"
        format: "int64"
        description: "The total number of successful system connections in the source."
        example: 4
      source_systems_failed:
        type: "integer"
        format: "int64"
        description: "The total number of failed system connections for the source."
        example: 1
  SourceOptions:
    type: "object"
    properties:
      ssl_cert_verify:
        type: "boolean"
        description: "If false disable SSL certificate verification."
      ssl_protocol:
        type: "string"
        description: "The SSL protocol to be used."
        enum:
          - SSLv2
          - SSLv23
          - SSLv3
          - TLSv1
          - TLSv1_1
          - TLSv1_2
      disable_ssl:
        type: "boolean"
        description: "If true disable SSL communication."
  SourceOut:
    allOf:
      - $ref: "#/definitions/Source"
      - type: "object"
        required:
          - id
          - credentials
        properties:
          id:
            type: "integer"
            format: "int64"
            example: 15
          credentials:
            type: "array"
            items:
              $ref: "#/definitions/CredentialMin"
            description: "The credentials to try with these hosts."
          options:
            $ref: "#/definitions/SourceOptions"
          connection:
            $ref: "#/definitions/SourceMostRecentConnectionJob"
  SourcePagination:
    allOf:
      - $ref: "#/definitions/ListPagination"
      - type: "object"
        required:
          - results
        properties:
          results:
            type: "array"
            items:
              $ref: "#/definitions/SourceOut"
            description: "The paginated source"
  SystemConnectResultOut:
    type: "object"
    required:
      - name
      - source
      - credential
      - status
    properties:
      name:
        type: "string"
        description: "The name of the system (ip, hostname, etc.)"
        example: "192.168.0.1"
      credential:
        $ref: "#/definitions/CredentialMin"
      source:
        $ref: "#/definitions/SourceMin"
      status:
        type: "string"
        description: "The status of the system connection."
        enum:
          - success
          - unreachable
          - failed
  SystemEntitlements:
    type: "object"
    properties:
        name:
          type: "string"
          description: "The entitlement name"
          example: "Red Hat Enterprise Linux, Company-Wide Subscription (Pilot)"
        entitlement_id:
          type: "string"
          description: "The entitlement id"
          example: "ESA0001"
        metadata:
          type: "array"
          items:
            $ref: "#/definitions/SystemFactMetadata"
  SystemFact:
    type: "object"
    required:
      - etc_release_name
      - etc_release_release
      - etc_release_version
      - connection_uuid
    properties:
        etc_release_name:
          type: "string"
          description: "The name of the operation system"
          example: "Red Hat Enterprise Linux Server"
        etc_release_release:
          type: "string"
          description: "The release of the operating system"
          example: "Red Hat Enterprise Linux Server release 6.7 (Santiago)"
        etc_release_version:
          type: "string"
          description: "The version of the operating system"
          example: "6.7"
        connection_uuid:
          type: "string"
          description: "The UUID of the connection"
          example: "abc7f26f-1234-57bd-85d8-de7617123456"
  SystemFactMetadata:
    type: "object"
    properties:
        source_id:
          type: "integer"
          format: "int64"
          description: "The id of source where this fact originated"
          example: 12
        source_name:
          type: "string"
          description: "The name of source where this fact originated"
          example: "TestMachines"
        source_type:
          type: "string"
          description: "The type of source where this fact originated"
          example: "network"
        raw_fact_key:
          type: "string"
          description: "The original fact name where this fact originated"
          example: "jboss_eap_packages"
  SystemInspectResultOut:
    type: "object"
    required:
      - name
      - status
      - source
      - facts
    properties:
      name:
        type: "string"
        description: "The name of the system (ip, hostname, etc.)"
        example: "192.168.0.1"
      status:
        type: "string"
        description: "The status of the system inspection"
        enum:
          - success
          - unreachable
          - failed
      source:
        $ref: "#/definitions/SourceMin"
      facts:
        type: "array"
        items:
          $ref: "#/definitions/RawFactsOut"
        description: "The raw facts collected from the system"
  SystemProducts:
    type: "object"
    properties:
        name:
          type: "string"
          description: "The product name"
          example: "JBoss EAP"
        presence:
          type: "string"
          enum:
            - present
            - absent
            - unknown
        version:
          type: "array"
          items:
            type: string
            description: "The product version"
            example: "EAP-7.0"
        metadata:
          type: "array"
          items:
            $ref: "#/definitions/SystemFactMetadata"
  SystemReport:
    type: "object"
    properties:
        id:
          type: "integer"
          format: "int64"
          description: "Fingerprint database identifier"
          example: 15
        report_id:
            type: "integer"
            format: "int64"
            description: "Fact collection identifier"
            example: 20
        name:
          type: "string"
          description: "The system name"
          example: "hostname.com"
        os_name:
          type: "string"
          description: "The operating system name"
          example: "Red Hat Enterprise Linux Server"
        os_release:
          type: "string"
          description: "The operating system release"
          example: "Red Hat Enterprise Linux Server release 5.9 (Tikanga)"
        os_version:
          type: "string"
          description: "The operating system version"
          example: "5.9 (Tikanga)"
        infrastructure_type:
          type: "string"
          enum:
            - virtualized
            - bare_metal
            - unknown
          description: "The infrastructure type"
        mac_addresses:
          type: "array"
          items:
            type: "string"
            description: "MAC addresses of system"
            example: "0B:AA:CC:44:A8:25"
          description: "The infrastructure type"
        ip_addresses:
          type: "array"
          items:
            type: "string"
            description: "IP addresses of system"
          example: ["192.168.0.1","192.168.0.2"]
          description: "The infrastructure type"
        cpu_count:
          type: "integer"
          format: "int64"
          description: "The count of cpus"
          example: 8
        architecture:
          type: "string"
          description: "The system architecture"
          example: "x86_64"
        bios_uuid:
          type: "string"
          description: "The system bios uuid"
          example: "65541E42-1234-A2C4-2BB4-F82448BDCEC"
        subscription_manager_id:
          type: "string"
          description: "The subscription manager identitifer"
          example: "65541E42-1234-A2C4-2BB4-F82448BDCEC"
        cpu_socket_count:
          type: "integer"
          format: "int64"
          description: "The count of cpu sockets"
          example: 2
        cpu_core_count:
          type: "integer"
          format: "int64"
          description: "The count of cpu cores"
          example: 4
        system_creation_date:
          type: "string"
          format: "date"
          description: "The system creation date"
          example: "2017-07-25"
        virtualized_type:
          type: "string"
          description: "The type of virtualization system"
          example: "vmware"
        vm_state:
          type: "string"
          description: "The state of virtual machine"
          example: "poweredOn"
        vm_uuid:
          type: "string"
          description: "The uuid of virtual machine"
          example: "9808421e-8426-0dfd-55bd-246c95434e1a"
        vm_dns_name:
          type: "string"
          description: "The DNS name of virtual machine"
          example: "dns.redhat.com"
        vm_host:
          type: "string"
          description: "The host of virtual machine"
          example: "host.redhat.com"
        vm_host_socket_count:
          type: "string"
          description: "The socket count for the virtual machine host"
          example: ""
        vm_cluster:
          type: "string"
          description: "The cluster of virtual machine"
          example: "Redhat Cluster"
        vm_datacenter:
          type: "string"
          description: "The data center of virtual machine"
          example: "RedHat Data center"
        products:
          type: "array"
          items:
            $ref: "#/definitions/SystemProducts"
        entitlements:
          type: "array"
          items:
            $ref: "#/definitions/SystemEntitlements"
        is_redhat:
          type: "boolean"
          description: "Indicates if the system is a RedHat system"
        redhat_certs:
            type: "string"
            description: "RedHat certificates"
            example: "183.pem"
        redhat_package_count:
            type: "integer"
            format: "int64"
            description: "RedHat package count"
            example: 65
        metadata:
          type: "object"
          description: "For each fact, there will be a metadata key describing origin fact"
          properties:
            name:
              $ref: "#/definitions/SystemFactMetadata"
        sources:
          type: "array"
          items:
            $ref: "#/definitions/SourceMin"
        system_last_checkin_date:
            type: "string"
            format: "date"
            description: "Last time the system was seen.  For VCenter sources, this is the last time the system was powered on.  For Satellite sources, this is the last time the system satellite agent reportd.  For network sources, this is the last time the system was scanned."
            example: "183.pem"
  SystemReportOut:
    properties:
        report_id:
          type: "string"
          description: "The fact collection id associate with report"
        report:
          type: "array"
          items:
            $ref: "#/definitions/SystemReport"
          description: "The report for the systems that were scanned"
  User:
    type: "object"
    required:
      - username
    properties:
      username:
        type: "string"
        description: "The username"
        example: "admin"
