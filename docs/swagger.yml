swagger: "2.0"
info:
  description: "The models and API for the Quipucords server."
  version: "1.0.0"
  title: "Quipucords API"
  contact:
    email: "quipucords@redhat.com"
  license:
    name: "GPL 3.0"
    url: "https://www.gnu.org/licenses/gpl-3.0.txt"

basePath: "/api/v1"

tags:
- name: "Credential"
  description: "API related to the Credential model"
- name: "Source"
  description: "API related to the Source model"
- name: "Scan"
  description: "API related to the Scan model"
- name: "Fact"
  description: "API related to the Fact model"
- name: "Report"
  description: "API related to the Report model"

paths:
  /facts/:
    post:
      tags:
        - "Fact"
      summary: "Publish facts from environment scans"
      description: "Publish facts from environment scans"
      operationId: "publishFacts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Facts that need to be stored"
        required: true
        schema:
          $ref: "#/definitions/FactCollectionIn"
      responses:
        201:
          description: "Fact collection created"
          schema:
            $ref: "#/definitions/FactCollectionOut"
        400:
          description: "Invalid input"
  /credentials/:
    post:
      tags:
        - "Credential"
      summary: "Add a new credential"
      description: "Create a new credential for use when connecting to a target system."
      operationId: "addCredential"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Credential object that needs to be stored"
        required: true
        schema:
          $ref: "#/definitions/Credential"
      responses:
        201:
          description: "Credential created"
          schema:
            $ref: "#/definitions/CredentialOut"
        400:
          description: "Invalid input"
    get:
      tags:
        - "Credential"
      summary: "List exsiting credentials"
      description: "List all credential for use when connecting to a target system."
      operationId: "listCredentials"
      produces:
      - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "A list of names representing credentials"
          type: "string"
        - name: "cred_type"
          in: "query"
          description: "Filter list based on credential type"
          type: "string"
          enum:
            - network
            - vcenter
            - satellite
      responses:
        200:
          description: "Credential retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CredentialOut"
  /credentials/{cred_id}:
    get:
      tags:
        - "Credential"
      summary: "Get an existing credential"
      description: "Get a credential for use when connecting to a target system."
      operationId: "getCredential"
      produces:
      - "application/json"
      parameters:
      - name: "cred_id"
        in: "path"
        description: "ID of credential to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Credential retrieved"
          schema:
            $ref: "#/definitions/CredentialOut"
        404:
          description: "Credential not found"
    put:
      tags:
        - "Credential"
      summary: "Update an existing credential"
      description: "Update a credential for use when connecting to a target system."
      operationId: "updateCredential"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cred_id"
        in: "path"
        description: "ID of credential to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Credential object that needs to be modified"
        required: true
        schema:
          $ref: "#/definitions/Credential"
      responses:
        200:
          description: "Credential updated"
          schema:
            $ref: "#/definitions/CredentialOut"
        400:
          description: "Invalid input"
        404:
          description: "Credential not found"
    delete:
      tags:
        - "Credential"
      summary: "Delete an existing credential"
      description: "Delete a credential for use when connecting to a target system."
      operationId: "deleteCredential"
      produces:
      - "application/json"
      parameters:
      - name: "cred_id"
        in: "path"
        description: "ID of credential to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Credential deleted"
        404:
          description: "Credential not found"
  /reports/:
    get:
      tags:
        - "Report"
      summary: "Retrieve list of reports for systems scanned"
      description: "List reports for systems that have been scanned."
      operationId: "listReports"
      produces:
      - "application/json"
      parameters:
        - name: "fact_collection_id"
          in: "query"
          description: "The Fact Collection ID to be queried"
          type: "string"
        - name: "group_count"
          in: "query"
          description: "The field to group and count on. Cannot be used with other filters."
          type: "string"
        - name: "source_type"
          in: "query"
          description: "Present the value for source_type."
          type: "boolean"
        - name: "os_name"
          in: "query"
          description: "Present the value for os_name."
          type: "boolean"
        - name: "os_release"
          in: "query"
          description: "Present the value for os_release."
          type: "boolean"
        - name: "cpu_socket_count"
          in: "query"
          description: "Present the value for cpu_socket_count."
          type: "boolean"
        - name: "system_creation_date"
          in: "query"
          description: "Present the value for system_creation_date."
          type: "boolean"
        - name: "infrastructure_type"
          in: "query"
          description: "Present the value for infrastructure_type."
          type: "boolean"
        - name: "vm_host"
          in: "query"
          description: "Present the value for vm_host."
          type: "boolean"
        - name: "vm_host_socket_count"
          in: "query"
          description: "Present the value for vm_host_socket_count."
          type: "boolean"
        - name: "vm_cluster"
          in: "query"
          description: "Present the value for vm_cluster."
          type: "boolean"
        - name: "vm_datacenter"
          in: "query"
          description: "Present the value for vm_datacenter."
          type: "boolean"
      responses:
        200:
          description: "List of reports for scanned systems"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SystemReportOut"
        404:
          description: "Report for fact collection id not found"
  /sources/:
    post:
      tags:
        - "Source"
      summary: "Add a new source"
      description: "Create a new source for scanning."
      operationId: "addSource"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "JSON object representing new source"
          required: true
          schema:
            $ref: "#/definitions/SourceIn"
      responses:
        201:
          description: "Source created"
          schema:
            $ref: "#/definitions/SourceOut"
        400:
          description: "Invalid input"
    get:
      tags:
        - "Source"
      summary: "List sources"
      description: "List all sources available for scanning."
      operationId: "listSources"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "A list of names representing sources"
          type: "string"
        - name: "source_type"
          in: "query"
          description: "Filter list based on source type"
          type: "string"
          enum:
            - network
            - vcenter
            - satellite
      responses:
        200:
          description: "Sources retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceOut"
  /sources/{source_id}:
    get:
      tags:
        - "Source"
      summary: "Get a source"
      description: "Get a source."
      operationId: "getSource"
      produces:
        - "application/json"
      parameters:
        - name: "source_id"
          in: "path"
          description: "ID of source to retrieve"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Source returned"
          schema:
            $ref: "#/definitions/SourceOut"
        404:
          description: "Source not found"
    put:
      tags:
        - "Source"
      summary: "Update an existing source"
      description: "Update an existing source"
      operationId: "updateSource"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "source_id"
          in: "path"
          description: "ID of source to update"
          required: true
          type: "number"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Source object to be modified"
          required: true
          schema:
            $ref: "#/definitions/SourceIn"
      responses:
        200:
          description: "Source updated"
          schema:
            $ref: "#/definitions/SourceOut"
        400:
          description: "Invalid input"
        404:
          description: "No source found"
    delete:
      tags:
        - "Source"
      summary: "Delete an existing source"
      description: "Delete an existing source"
      operationId: "deleteSource"
      produces:
        - "application/json"
      parameters:
        - name: "source_id"
          in: "path"
          description: "ID of source to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "Source deleted"
        404:
          description: "Source not found"
  /scans/:
    post:
      tags:
        - "Scan"
      summary: "Trigger a scan"
      description: "Create a new scan job."
      operationId: "triggerScan"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Scan job object that tracks a scan"
        required: true
        schema:
          $ref: "#/definitions/ScanJobIn"
      responses:
        201:
          description: "Scan job created"
          schema:
            $ref: "#/definitions/ScanJobOut"
        400:
          description: "Invalid input"
    get:
      tags:
        - "Scan"
      summary: "List exsiting scan jobs"
      description: "List all scans."
      operationId: "listScanJobs"
      produces:
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Filter list based on job status"
          type: "string"
          enum:
            - created
            - pending
            - running
            - paused
            - canceled
            - completed
            - failed
        - name: "scan_type"
          in: "query"
          description: "Filter list based on scan type"
          type: "string"
          enum:
            - connect
            - inspect
      responses:
        200:
          description: "Scan jobs retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScanJobOut"
  /scans/{scan_job_id}:
    get:
      tags:
        - "Scan"
      summary: "Get an existing scan job"
      description: "Get a scan job's current status."
      operationId: "getScanJob"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job retrieved"
          schema:
            $ref: "#/definitions/ScanJobOut"
        404:
          description: "Scan job not found"
  /scans/{scan_job_id}/results/:
    get:
      tags:
        - "Scan"
      summary: "Get the results of existing scan job"
      description: "Get the results of a scan."
      operationId: "getScanResults"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job to retrieve results for"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job results retrieved"
          schema:
            $ref: "#/definitions/ScanJobResultsOut"
        404:
          description: "Scan job results not found"
  /scans/{scan_job_id}/pause/:
    put:
      tags:
        - "Scan"
      summary: "Pauses an existing scan job"
      description: "Pauses a scan if its currently running, fails otherwise."
      operationId: "pauseScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job to pause"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job paused"
          schema:
            $ref: "#/definitions/ScanJobOut"
        400:
          description: "Scan job not running"
        404:
          description: "Scan job not found"
  /scans/{scan_job_id}/cancel/:
    put:
      tags:
        - "Scan"
      summary: "Cancels an existing scan job"
      description: "Cancels a scan if its has not finished, fails otherwise."
      operationId: "cancelScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job to cancel"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job canceled"
          schema:
            $ref: "#/definitions/ScanJobOut"
        400:
          description: "Scan job has already finished"
        404:
          description: "Scan job not found"
  /scans/{scan_job_id}/restart/:
    put:
      tags:
        - "Scan"
      summary: "Restarts an existing scan job"
      description: "Restarts a scan if its has been paused, fails otherwise."
      operationId: "restartScan"
      produces:
      - "application/json"
      parameters:
      - name: "scan_job_id"
        in: "path"
        description: "ID of scan job to restart"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Scan job restarted"
          schema:
            $ref: "#/definitions/ScanJobOut"
        400:
          description: "Scan job was not in paused state"
        404:
          description: "Scan job not found"
definitions:
  SystemFact:
    type: "object"
    required:
      - etc_release_name
      - etc_release_release
      - etc_release_version
      - connection_uuid
    properties:
        etc_release_name:
          type: "string"
          description: "The name of the operation system"
          example: "Red Hat Enterprise Linux Server"
        etc_release_release:
          type: "string"
          description: "The release of the operating system"
          example: "Red Hat Enterprise Linux Server release 6.7 (Santiago)"
        etc_release_version:
          type: "string"
          description: "The version of the operating system"
          example: "6.7"
        connection_uuid:
          type: "string"
          description: "The UUID of the connection"
          example: "abc7f26f-1234-57bd-85d8-de7617123456"
  FactCollectionIn:
    type: "object"
    required:
      - sources
    properties:
        sources:
          type: "array"
          items:
            $ref: "#/definitions/FactCollectionSource"
          description: "The facts obtained during a scan"
          minItems: 1

  FactCollectionOut:
    type: "object"
    required:
      - id
      - sources
    properties:
        id:
          type: "integer"
          format: "int64"
          description: "The fact collection identifier"
          example: 15
        facts:
          type: "array"
          items:
            $ref: "#/definitions/FactCollectionSource"
          description: "The facts obtained during a scan"
          minItems: 1
  FactCollectionSource:
    type: "object"
    required:
      - source_id
      - source_type
      - facts
    properties:
      source_id:
        type: "integer"
        description: "The source associated with these facts"
        example: 12
      source_type:
        type: "string"
        description: "The type of source used for scanning"
        enum:
          - network
          - vcenter
          - satellite
      facts:
        type: "array"
        items:
          $ref: "#/definitions/SystemFact"
        description: "The facts obtained during a scan for this source"
        minItems: 1
  Credential:
    type: "object"
    required:
      - name
      - username
      - password
      - ssh_keyfile
    properties:
        name:
          type: "string"
          description: "The name of the credential"
        cred_type:
          type: "string"
          description: "The type of the credential"
          enum:
            - network
            - vcenter
            - satellite
        username:
          type: "string"
          description: "The connection username for the credential"
        password:
          type: "string"
          description: "The connection password for the credential"
        ssh_keyfile:
          type: "string"
          description: "The connection private ssh keyfile for the credential"
        become_method:
          type: "string"
          description: "The method to become for ansible privilege escalation"
          enum:
            - sudo
            - su
            - pbrun
            - pfexec
            - doas
            - dzdo
            - ksu
            - runas
        become_user:
          type: "string"
          description: "The user to become when running a privileged command during network scan."
        become_password:
          type: "string"
          description: "The privilege escalation password to be used when running a network scan."
  CredentialMin:
    type: "object"
    required:
      - id
      - name
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        description: "The name of the credential"
      cred_type:
        type: "string"
        description: "The type of the credential"
        enum:
          - network
          - vcenter
          - satellite
  CredentialOut:
    allOf:
      - $ref: "#/definitions/Credential"
      - type: "object"
        required:
          - id
        properties:
          id:
            type: "integer"
            format: "int64"
  SystemReport:
    type: "object"
    properties:
        id:
          type: "integer"
          format: "int64"
          description: "Fingerprint database identifier"
        fact_collection_id:
            type: "integer"
            format: "int64"
            description: "Fact collection identifier"
        source_id:
            type: "integer"
            format: "int64"
            description: "Source identifier"
        source_type:
          type: "string"
          enum:
            - network
            - vcenter
            - satellite
          description: "The source type"
        bios_uuid:
          type: "string"
          description: "The system bios uuid"
        subscription_manager_id:
          type: "string"
          description: "The subscription manager identitifer"
        os_name:
          type: "string"
          description: "The operating system name"
        os_version:
          type: "string"
          description: "The operating system version"
        os_release:
          type: "string"
          description: "The operating system release"
        cpu_count:
          type: "integer"
          format: "int64"
          description: "The count of cpus"
        cpu_socket_count:
          type: "integer"
          format: "int64"
          description: "The count of cpu sockets"
        cpu_core_count:
          type: "integer"
          format: "int64"
          description: "The count of cpu cores"
        cpu_hyperthreading:
          type: "boolean"
          description: "cpu hyperthreading"
        cpu_core_per_socket:
          type: "integer"
          format: "int64"
          description: "The count of cpu cores per socket"
        system_creation_date:
          type: "string"
          description: "The system creation date"
        infrastructure_type:
          type: "string"
          enum:
            - virtualized
            - bare_metal
            - unknown
          description: "The infrastructure type"
        virtualized_is_guest:
          type: "boolean"
          description: "Is system a virtualized guest"
        virtualized_type:
          type: "string"
          description: "The type of virtualization system"
        virtualized_num_guests:
          type: "integer"
          format: "int64"
          description: "The number of virtualized guests"
        virtualized_num_running_guests:
          type: "integer"
          format: "int64"
          description: "The number of running virtualized guests"
        virtualized_host:
          type: "string"
          description: "The virtualized host name"
        virtualized_host_socket_count:
          type: "integer"
          format: "int64"
          description: "The number of cpu sockets on the virtualized host"
        virtualized_cluster:
          type: "string"
          description: "The virtualized cluster name"
        virtualized_datacenter:
          type: "string"
          description: "The virtualized datacenter name"
        count:
          type: "integer"
          format: "int64"
          description: "The number of times a grouped field appears in the scanned environment"
  SystemReportOut:
    properties:
        fact_collection_id:
          type: "string"
          description: "The fact collection id associate with report"
        report:
          type: "array"
          items:
            $ref: "#/definitions/SystemReport"
          description: "The report for the systems that were scanned"
  Source:
    type: "object"
    required:
      - name
      - source_type
      - hosts
      - port
    properties:
      name:
        type: "string"
        description: "The name of the source"
      source_type:
        type: "string"
        description: "The type of the source"
        enum:
          - network
          - vcenter
          - satellite
      hosts:
        type: "array"
        items:
          type: "string"
        description: "The host(s) to scan.Can be an IP or hostname for vcenter/satellite; or ips, hostnames or IP ranges for network."
      port:
        type: "integer"
        format: "int32"
        description: "The port to use on the host(s)."
  SourceMin:
    type: "object"
    required:
      - id
      - name
      - source_type
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        description: "The name of the source"
      source_type:
        type: "string"
        description: "The type of the source"
        enum:
          - network
          - vcenter
          - satellite
  SourceIn:
    allOf:
      - $ref: "#/definitions/Source"
      - type: "object"
        required:
          - credentials
        properties:
          credentials:
            type: "array"
            items:
              type: "integer"
              format: "int64"
            description: "The credentials to try with these hosts."
  SourceOut:
    allOf:
      - $ref: "#/definitions/Source"
      - type: "object"
        required:
          - id
          - credentials
        properties:
          id:
            type: "integer"
            format: "int64"
          credentials:
            type: "array"
            items:
              $ref: "#/definitions/CredentialMin"
            description: "The credentials to try with these hosts."
  ScanTask:
    type: "object"
    properties:
      source:
        type: "integer"
        format: "int64"
        description: "The identifier of the source."
      scan_type:
        type: "string"
        description: "The type of scan task."
        enum:
          - inspect
          - connect
      status:
        type: "string"
        description: "The status of the scan task."
        enum:
          - created
          - pending
          - running
          - paused
          - canceled
          - failed
          - completed
      systems_count:
        type: "integer"
        format: "int64"
        description: "The total number of systems to be scanned in the taks."
      systems_scanned:
        type: "integer"
        format: "int64"
        description: "The total number of systems that have been scanned in the task."
      systems_failed:
        type: "integer"
        format: "int64"
        description: "The total number of systems that failed during the scan task."
  ScanOptions:
    type: "object"
    properties:
      max_concurrency:
        type: "integer"
        format: "int64"
        description: "The maximum concurrent host scans. default is 50."
  ScanJob:
    type: "object"
    properties:
        scan_type:
          type: "string"
          description: "The type of scan. 'connect' is the default."
          enum:
            - inspect
            - connect
        options:
          $ref: "#/definitions/ScanOptions"
  ScanJobIn:
    allOf:
      - $ref: "#/definitions/ScanJob"
      - type: "object"
        required:
          - sources
        properties:
          sources:
            type: "array"
            items:
              type: "integer"
              format: "int64"
            description: "The list of source identifiers"
  ScanJobOut:
    allOf:
      - $ref: "#/definitions/ScanJob"
      - type: "object"
        required:
          - id
          - sources
        properties:
          id:
            type: "integer"
            format: "int64"
          status:
            type: "string"
            description: "The status of the scan."
            enum:
              - created
              - pending
              - running
              - paused
              - canceled
              - failed
              - completed
          sources:
            type: "array"
            items:
              $ref: "#/definitions/SourceMin"
            description: "The list of sources"
          tasks:
            type: "array"
            items:
              $ref: "#/definitions/ScanTask"
            description: "The scan tasks being processed."
          systems_count:
            type: "integer"
            format: "int64"
            description: "The total number of systems to be scanned."
          systems_scanned:
            type: "integer"
            format: "int64"
            description: "The total number of systems that have been scanned."
          systems_failed:
            type: "integer"
            format: "int64"
            description: "The total number of systems that failed to scan."
          fact_collection_id:
            type: "integer"
            format: "int64"
            description: "The identifier of the sent fact collection."
  SysConnResultOut:
    type: "object"
    required:
      - name
      - credential
      - status
    properties:
      name:
        type: "string"
        description: "The name of the system (ip, hostname, etc.)"
      credential:
        $ref: "#/definitions/CredentialMin"
      status:
        type: "string"
        description: "The status of the system connection."
        enum:
          - success
          - unreachable
          - failed
  ConnResultsOut:
    type: "object"
    required:
      - source
      - systems
    properties:
      source:
        $ref: "#/definitions/SourceMin"
      systems:
        type: "array"
        items:
          $ref: "#/definitions/SysConnResultOut"
        description: "The connection result for each system."
  RawFactsOut:
    type: "object"
    required:
      - name
      - value
    properties:
      name:
        type: "string"
        description: "The raw fact name."
      value:
        type: "string"
        description: "The raw fact value"
  SysInpectResultOut:
    type: "object"
    required:
      - name
      - facts
      - status
    properties:
      name:
        type: "string"
        description: "The name of the system (ip, hostname, etc.)"
      facts:
        type: "array"
        items:
          $ref: "#/definitions/RawFactsOut"
        description: "The raw facts collected from the system."
      status:
        type: "string"
        description: "The status of the system connection."
        enum:
          - success
          - unreachable
          - failed
  InspectResultsOut:
    type: "object"
    required:
      - source
      - systems
    properties:
      source:
        $ref: "#/definitions/SourceMin"
      systems:
        type: "array"
        items:
          $ref: "#/definitions/SysInpectResultOut"
        description: "The connection result for each system."
  ScanJobResultsOut:
    type: "object"
    required:
      - connection_results
      - inspection_results
    properties:
        connection_results:
          type: "array"
          items:
            $ref: "#/definitions/ConnResultsOut"
          description: "The connection results"
        inspection_results:
          type: "array"
          items:
            $ref: "#/definitions/InspectResultsOut"
          description: "The connection results"
