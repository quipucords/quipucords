---

- name: Install server setting
  set_fact:
    install_server: "{{ install_server | bool | default(true) }}"
  when: install_server is defined

- name: Defaulting server install setting
  set_fact:
    install_server: true
  when: install_server is not defined

- name: Set server directory
  set_fact:
    server_install_dir: "{{ ansible_env['SERVER_DIR'] | default(ansible_env['HOME'] + '/quipucords') }}"
  when: server_install_dir is not defined

- name: Set server port
  set_fact:
    server_port: "{{ ansible_env['SERVER_PORT'] | default('9443') }}"
  when: server_port is not defined


- name: Determine if supervisord should be used
  set_fact:
    use_supervisord: "{{ use_supervisord | bool | default(true) }}"
  when: use_supervisord is defined

- name: Defaulting server install setting
  set_fact:
    use_supervisord: true
  when: use_supervisord is not defined

- name: Set default server url
  set_fact:
    default_server_url: "https://github.com/quipucords/quipucords/releases/download/{{RELEASE_TAG}}/quipucords.{{RELEASE_TAG}}.tar.gz"

- name: Set server url
  set_fact:
    server_url: "{{ ansible_env['SERVER_URL'] |  default(default_server_url)}}"
  when: server_url is not defined

- name: Set server image name
  set_fact:
    image: "{{ ansible_env['SERVER_IMAGE'] | default('quipucords') }}"
  when: image is not defined

- name: Set server_image_and_tag
  set_fact:
    server_image_and_tag: "{{image}}:{{RELEASE_TAG}}"
  when: server_image_and_tag is not defined

- name: Set server name
  set_fact:
    server_name: "{{ ansible_env['SERVER_NAME'] | default('quipucords') }}"
  when: server_name is not defined

- name: Set server timeout
  set_fact:
    QPC_SERVER_TIMEOUT: "{{ ansible_env['QPC_SERVER_TIMEOUT'] | default('120') }}"
  when: QPC_SERVER_TIMEOUT is not defined

- name: Default directory mounting to empty string
  set_fact:
    dir_mount_selinux: ""

- name: Set dir_mount_selinux to add ":z" if selinux_on is true
  set_fact:
    dir_mount_selinux: ":z"
  when: selinux_on

- name: Check for quipucords image presence
  shell: docker images | grep "{{ image }}" | grep "{{ RELEASE_TAG }}"
  become: true
  register: quipucords_docker_image_raw
  ignore_errors: yes
  when: install_server

- name: Check for postgres image presence
  shell: docker images | grep postgres | grep "{{ POSTGRES_VERSION }}"
  become: true
  register: postgres_docker_image_raw
  ignore_errors: yes

- name: Set quipucords_docker_image_present false
  set_fact:
    quipucords_docker_image_present: false
  when:
    - quipucords_docker_image_raw.rc != 0

- name: Set postgres_docker_image_present false
  set_fact:
    postgres_docker_image_present: false
  when:
    - postgres_docker_image_raw.rc != 0

- name: Set quipucords_docker_image_present true
  set_fact:
    quipucords_docker_image_present: "{{ quipucords_docker_image_raw['stdout_lines']|length > 0 }}"
  when:
    - quipucords_docker_image_raw.rc == 0
    - "'stdout_lines' in quipucords_docker_image_raw"

- name: Set postgres_docker_image_present true
  set_fact:
    postgres_docker_image_present: "{{ postgres_docker_image_raw['stdout_lines']|length > 0 }}"
  when:
    - postgres_docker_image_raw.rc == 0
    - "'stdout_lines' in postgres_docker_image_raw"

- name: Set qpc_local_server_path
  set_fact:
    qpc_server_local_path: "{{ pkg_install_dir }}quipucords.{{RELEASE_TAG}}.tar.gz"
  when: qpc_server_local_path is not defined

- name: Set postgres_image_path
  set_fact:
    postgres_image_local_path: "{{ pkg_install_dir }}postgres.{{POSTGRES_VERSION}}.tar"
  when:
    - postgres_image_local_path is not defined

- name: Check if local server release exists
  stat:
    path: "{{qpc_server_local_path}}"
  register: find_qpc_server_local

- name: Check if postgres image exists
  stat:
    path: "{{postgres_image_local_path}}"
  register: find_postgres_local_image

- name: Ensure packages directory exists
  shell: mkdir -p "{{ pkg_install_dir }}"
  when:
    - install_server
    - find_qpc_server_local.stat.exists == false
    - not quipucords_docker_image_present

- name: Obtain Quipucords server container image
  get_url:
    url: "{{ server_url }}"
    dest: "{{ pkg_install_dir }}"
    mode: 0644
    timeout: 300
  when:
    - install_server
    - find_qpc_server_local.stat.exists == false
    - not quipucords_docker_image_present

- name: Load Quipucords image into local Docker registry
  shell: docker load -i "{{qpc_server_local_path}}"
  become: true
  when:
    - install_server
    - not quipucords_docker_image_present

- name: Load postgres image into local Docker registry
  shell: docker load -i "{{postgres_image_local_path}}"
  become: true
  when:
    - not postgres_docker_image_present
    - find_postgres_local_image.stat.exists == true

- name: Make server home directory
  shell: mkdir -p "{{server_install_dir}}"
  when: install_server

- name: Make server log directory
  shell: mkdir -p "{{server_install_dir}}/log"
  when: install_server

- name: Make server sshkeys directory
  shell: mkdir -p "{{server_install_dir}}/sshkeys"
  when: install_server

- name: Check for QPC server already running
  shell: docker ps -a -f name="{{ server_name }}" | grep "{{server_name}}"
  become: true
  register: qpc_ps_raw
  ignore_errors: yes
  when: install_server

- name: Remove running QPC server
  shell: docker rm -f "{{server_name}}"
  become: true
  ignore_errors: yes
  when:
    - qpc_ps_raw['stdout_lines'] | length > 0

- name: Check if postgres server already running
  shell: docker ps -a -f name="qpc-db" | grep "qpc-db"
  become: true
  register: postgres_ps_raw
  ignore_errors: yes
  when: install_server

- name: Remove running postgres server
  shell: docker rm -f qpc-db
  become: true
  ignore_errors: yes
  when:
    - postgres_ps_raw['stdout_lines'] | length > 0

- name: Set QPC_DBMS_USER
  set_fact:
    QPC_DBMS_USER: "{{ ansible_env['QPC_DBMS_USER'] | default('postgres') }}"
  when:
    - QPC_DBMS_USER is not defined

- name: Set QPC_DBMS_PASSWORD
  set_fact:
    QPC_DBMS_PASSWORD: "{{ansible_env['QPC_DBMS_PASSWORD'] | default('password') }}"
  when:
    - QPC_DBMS_PASSWORD is not defined

- name: Create internal Postgres container & docker volume (RHEL 6 & Centos 6)
  shell: docker run --name qpc-db  -e POSTGRES_USER="{{QPC_DBMS_USER}}" -e POSTGRES_PASSWORD="{{QPC_DBMS_PASSWORD}}" -v /var/lib/docker/volumes/qpc-data:/var/lib/postgresql/data -d postgres:"{{POSTGRES_VERSION}}"
  become: true
  when:
    - is_rhel_centos_6

- name: Create internal Postgres container & docker volume (RHEL 7, Centos 7, Fedora)
  shell: docker run --name qpc-db  -e POSTGRES_USER="{{QPC_DBMS_USER}}" -e POSTGRES_PASSWORD="{{QPC_DBMS_PASSWORD}}" -v qpc-data:/var/lib/postgresql/data -d postgres:"{{POSTGRES_VERSION}}"
  become: true
  when:
    - is_rhel_centos_7 or is_fedora

- name: Start QPC server using linked Postgres Docker container
  shell: docker run --name "{{ server_name }}" --link qpc-db:qpc-link -d -e USE_SUPERVISORD="{{ use_supervisord }}" -e QPC_SERVER_TIMEOUT="{{ QPC_SERVER_TIMEOUT }}" -e QPC_DBMS_USER="{{ QPC_DBMS_USER }}" -e QPC_DBMS_PASSWORD="{{ QPC_DBMS_PASSWORD }}" -e QPC_DBMS_HOST="qpc-db" -p "{{ server_port }}":443 -v "{{ server_install_dir }}"/sshkeys:/sshkeys"{{ dir_mount_selinux }}" -v "{{ server_install_dir }}"/data:/var/data"{{ dir_mount_selinux }}" -v "{{ server_install_dir }}"/log:/var/log"{{ dir_mount_selinux }}" -i "{{ server_image_and_tag }}"
  become: true
