# Generated by Django 4.2.23 on 2025-07-07 18:50

import uuid

import django.db.models.deletion
from django.db import migrations, models

import api.common.common_report
import api.common.util
import api.deployments_report.model


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Credential",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=64, unique=True)),
                (
                    "cred_type",
                    models.CharField(
                        choices=[
                            ("network", "network"),
                            ("vcenter", "vcenter"),
                            ("satellite", "satellite"),
                            ("openshift", "openshift"),
                            ("ansible", "ansible"),
                            ("rhacs", "rhacs"),
                        ],
                        max_length=9,
                    ),
                ),
                ("username", models.CharField(blank=True, max_length=64, null=True)),
                ("password", models.CharField(blank=True, max_length=1024, null=True)),
                (
                    "auth_token",
                    models.CharField(blank=True, max_length=6000, null=True),
                ),
                (
                    "ssh_keyfile",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                ("ssh_key", models.CharField(blank=True, max_length=65536, null=True)),
                (
                    "ssh_passphrase",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                (
                    "become_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("sudo", "sudo"),
                            ("su", "su"),
                            ("pbrun", "pbrun"),
                            ("pfexec", "pfexec"),
                            ("doas", "doas"),
                            ("dzdo", "dzdo"),
                            ("ksu", "ksu"),
                            ("runas", "runas"),
                        ],
                        max_length=6,
                        null=True,
                    ),
                ),
                ("become_user", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "become_password",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
            ],
            options={
                "verbose_name_plural": "Credentials",
            },
        ),
        migrations.CreateModel(
            name="DeploymentsReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("details", "details"),
                            ("deployments", "deployments"),
                        ],
                        default="deployments",
                        max_length=11,
                    ),
                ),
                ("report_version", models.CharField(max_length=64)),
                (
                    "report_platform_id",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("failed", "failed"),
                            ("completed", "completed"),
                        ],
                        default="pending",
                        max_length=16,
                    ),
                ),
                (
                    "cached_fingerprints_file_path",
                    models.FilePathField(
                        blank=True,
                        max_length=255,
                        null=True,
                        path=api.deployments_report.model.cached_files_path,
                    ),
                ),
                (
                    "cached_csv_file_path",
                    models.FilePathField(
                        blank=True,
                        max_length=255,
                        null=True,
                        path=api.deployments_report.model.cached_files_path,
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InspectGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("network", "network"),
                            ("vcenter", "vcenter"),
                            ("satellite", "satellite"),
                            ("openshift", "openshift"),
                            ("ansible", "ansible"),
                            ("rhacs", "rhacs"),
                        ],
                        max_length=12,
                    ),
                ),
                ("source_name", models.CharField(max_length=64)),
                ("server_id", models.CharField(max_length=36)),
                ("server_version", models.CharField(max_length=64)),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InspectResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=1024)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "success"),
                            ("failed", "failed"),
                            ("unreachable", "unreachable"),
                        ],
                        max_length=12,
                    ),
                ),
                (
                    "inspect_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inspect_results",
                        to="api.inspectgroup",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "System inspection results",
            },
        ),
        migrations.CreateModel(
            name="JobConnectionResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
            ],
            options={
                "verbose_name_plural": "Job connection results",
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "report_version",
                    models.CharField(
                        default=api.common.common_report.create_report_version,
                        max_length=64,
                    ),
                ),
                (
                    "report_platform_id",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                ("cached_csv", models.TextField(null=True)),
                (
                    "deployment_report",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report",
                        to="api.deploymentsreport",
                    ),
                ),
                (
                    "inspect_groups",
                    models.ManyToManyField(
                        related_name="reports", to="api.inspectgroup"
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Scan",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=64, unique=True)),
                (
                    "scan_type",
                    models.CharField(
                        choices=[("inspect", "inspect")],
                        default="inspect",
                        max_length=9,
                    ),
                ),
                ("max_concurrency", models.PositiveIntegerField(default=25)),
                ("enabled_optional_products", models.JSONField(null=True)),
                ("enabled_extended_product_search", models.JSONField(null=True)),
            ],
            options={
                "verbose_name_plural": "Scans",
            },
        ),
        migrations.CreateModel(
            name="ScanJob",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "scan_type",
                    models.CharField(
                        choices=[
                            ("inspect", "inspect"),
                            ("fingerprint", "fingerprint"),
                        ],
                        default="inspect",
                        max_length=12,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("created", "created"),
                            ("pending", "pending"),
                            ("running", "running"),
                            ("paused", "paused"),
                            ("completed", "completed"),
                            ("canceled", "canceled"),
                            ("failed", "failed"),
                        ],
                        default="created",
                        max_length=20,
                    ),
                ),
                (
                    "status_message",
                    models.TextField(default="Job is created.", null=True),
                ),
                ("start_time", models.DateTimeField(null=True)),
                ("end_time", models.DateTimeField(null=True)),
                (
                    "connection_results",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.jobconnectionresult",
                    ),
                ),
                (
                    "report",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.report",
                    ),
                ),
                (
                    "scan",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="jobs",
                        to="api.scan",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Scan jobs",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="ServerInformation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("global_identifier", models.CharField(max_length=36)),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=64, unique=True)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("network", "network"),
                            ("vcenter", "vcenter"),
                            ("satellite", "satellite"),
                            ("openshift", "openshift"),
                            ("ansible", "ansible"),
                            ("rhacs", "rhacs"),
                        ],
                        max_length=12,
                    ),
                ),
                ("port", models.IntegerField(null=True)),
                (
                    "ssl_protocol",
                    models.CharField(
                        choices=[
                            ("SSLv23", "SSLv23"),
                            ("TLSv1", "TLSv1"),
                            ("TLSv1_1", "TLSv1_1"),
                            ("TLSv1_2", "TLSv1_2"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("ssl_cert_verify", models.BooleanField(null=True)),
                ("disable_ssl", models.BooleanField(null=True)),
                ("use_paramiko", models.BooleanField(null=True)),
                ("hosts", models.JSONField(default=list)),
                ("exclude_hosts", models.JSONField(null=True)),
                ("proxy_url", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "credentials",
                    models.ManyToManyField(related_name="sources", to="api.credential"),
                ),
                (
                    "most_recent_connect_scan",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="api.scanjob",
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskConnectionResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "job_connection_result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_results",
                        to="api.jobconnectionresult",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Task connection results",
            },
        ),
        migrations.CreateModel(
            name="SystemFingerprint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(blank=True, max_length=256, null=True)),
                ("os_name", models.CharField(blank=True, max_length=64, null=True)),
                ("os_release", models.CharField(blank=True, max_length=128, null=True)),
                ("os_version", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "infrastructure_type",
                    models.CharField(
                        choices=[
                            ("bare_metal", "Bare Metal"),
                            ("virtualized", "Virtualized"),
                            ("hypervisor", "Hypervisor"),
                            ("unknown", "Unknown"),
                        ],
                        max_length=12,
                    ),
                ),
                (
                    "cloud_provider",
                    models.CharField(blank=True, max_length=16, null=True),
                ),
                ("mac_addresses", models.JSONField(blank=True, null=True)),
                ("ip_addresses", models.JSONField(blank=True, null=True)),
                ("cpu_count", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "architecture",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "system_memory_bytes",
                    models.PositiveBigIntegerField(blank=True, null=True),
                ),
                ("bios_uuid", models.CharField(blank=True, max_length=36, null=True)),
                (
                    "subscription_manager_id",
                    models.CharField(blank=True, max_length=36, null=True),
                ),
                (
                    "cpu_socket_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("cpu_core_count", models.FloatField(blank=True, null=True)),
                (
                    "cpu_core_per_socket",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("cpu_hyperthreading", models.BooleanField(null=True)),
                ("installed_products", models.JSONField(blank=True, null=True)),
                ("system_creation_date", models.DateField(blank=True, null=True)),
                ("system_last_checkin_date", models.DateField(blank=True, null=True)),
                ("system_purpose", models.TextField(blank=True, null=True)),
                (
                    "system_role",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                ("system_addons", models.TextField(blank=True, null=True)),
                (
                    "system_service_level_agreement",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "system_usage_type",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "insights_client_id",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "virtualized_type",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "virtual_host_name",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "virtual_host_uuid",
                    models.CharField(blank=True, max_length=36, null=True),
                ),
                (
                    "system_user_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("vm_state", models.CharField(blank=True, max_length=24, null=True)),
                ("vm_uuid", models.CharField(blank=True, max_length=36, null=True)),
                (
                    "vm_dns_name",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "vm_host_socket_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "vm_host_core_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("vm_cluster", models.CharField(blank=True, max_length=128, null=True)),
                (
                    "vm_datacenter",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                ("is_redhat", models.BooleanField(null=True)),
                ("redhat_certs", models.TextField(blank=True, null=True)),
                (
                    "redhat_package_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("metadata", models.JSONField(default=dict)),
                ("sources", models.JSONField(default=list)),
                (
                    "etc_machine_id",
                    models.CharField(blank=True, max_length=48, null=True),
                ),
                (
                    "deployment_report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="system_fingerprints",
                        to="api.deploymentsreport",
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SystemConnectionResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "success"),
                            ("failed", "failed"),
                            ("unreachable", "unreachable"),
                        ],
                        max_length=12,
                    ),
                ),
                (
                    "credential",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.credential",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.source",
                    ),
                ),
                (
                    "task_connection_result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="systems",
                        to="api.taskconnectionresult",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "System connection results",
            },
        ),
        migrations.CreateModel(
            name="ScanTask",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "scan_type",
                    models.CharField(
                        choices=[
                            ("inspect", "inspect"),
                            ("fingerprint", "fingerprint"),
                        ],
                        max_length=12,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("created", "created"),
                            ("pending", "pending"),
                            ("running", "running"),
                            ("paused", "paused"),
                            ("completed", "completed"),
                            ("canceled", "canceled"),
                            ("failed", "failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "status_message",
                    models.TextField(default="Task is pending.", null=True),
                ),
                ("systems_count", models.PositiveIntegerField(default=0)),
                ("systems_scanned", models.PositiveIntegerField(default=0)),
                ("systems_failed", models.PositiveIntegerField(default=0)),
                ("systems_unreachable", models.PositiveIntegerField(default=0)),
                ("sequence_number", models.PositiveIntegerField(default=0)),
                ("start_time", models.DateTimeField(null=True)),
                ("end_time", models.DateTimeField(null=True)),
                (
                    "connection_result",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.taskconnectionresult",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="api.scanjob",
                    ),
                ),
                ("prerequisites", models.ManyToManyField(to="api.scantask")),
                (
                    "source",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.source",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Scan tasks",
                "ordering": ("sequence_number",),
                "unique_together": {("job", "scan_type", "source")},
            },
        ),
        migrations.AddField(
            model_name="scanjob",
            name="sources",
            field=models.ManyToManyField(to="api.source"),
        ),
        migrations.AddField(
            model_name="scan",
            name="most_recent_scanjob",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="api.scanjob",
            ),
        ),
        migrations.AddField(
            model_name="scan",
            name="sources",
            field=models.ManyToManyField(to="api.source"),
        ),
        migrations.CreateModel(
            name="RawFact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=1024)),
                (
                    "value",
                    models.JSONField(encoder=api.common.util.RawFactEncoder, null=True),
                ),
                (
                    "inspect_result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="api.inspectresult",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Raw facts",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=256)),
                ("version", models.JSONField(null=True)),
                (
                    "presence",
                    models.CharField(
                        choices=[
                            ("present", "Present"),
                            ("absent", "Absent"),
                            ("potential", "Potential"),
                            ("unknown", "Unknown"),
                        ],
                        max_length=10,
                    ),
                ),
                ("metadata", models.JSONField(default=dict)),
                (
                    "fingerprint",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        to="api.systemfingerprint",
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="inspectgroup",
            name="source",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.source"
            ),
        ),
        migrations.AddField(
            model_name="inspectgroup",
            name="tasks",
            field=models.ManyToManyField(
                related_name="inspect_groups", to="api.scantask"
            ),
        ),
        migrations.CreateModel(
            name="Entitlement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=256, null=True)),
                ("entitlement_id", models.CharField(max_length=256, null=True)),
                ("metadata", models.JSONField(default=dict)),
                (
                    "fingerprint",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entitlements",
                        to="api.systemfingerprint",
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AggregateReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "ansible_hosts_all",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "ansible_hosts_in_database",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "ansible_hosts_in_jobs",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "inspect_result_status_failed",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "inspect_result_status_success",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "inspect_result_status_unknown",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "inspect_result_status_unreachable",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "instances_hypervisor",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "instances_not_redhat",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "instances_physical",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "instances_unknown",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "instances_virtual",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "jboss_eap_cores_physical",
                    models.FloatField(blank=True, default=0.0, null=True),
                ),
                (
                    "jboss_eap_cores_virtual",
                    models.FloatField(blank=True, default=0.0, null=True),
                ),
                (
                    "jboss_eap_instances",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "jboss_ws_cores_physical",
                    models.FloatField(blank=True, default=0.0, null=True),
                ),
                (
                    "jboss_ws_cores_virtual",
                    models.FloatField(blank=True, default=0.0, null=True),
                ),
                (
                    "jboss_ws_instances",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "missing_cpu_core_count",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "missing_cpu_socket_count",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "missing_name",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "missing_pem_files",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "missing_system_creation_date",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "missing_system_purpose",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "openshift_cores",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                ("openshift_operators_by_name", models.JSONField(default=dict)),
                ("openshift_operators_by_kind", models.JSONField(default=dict)),
                ("os_by_name_and_version", models.JSONField(default=dict)),
                (
                    "socket_pairs",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "system_creation_date_average",
                    models.DateField(blank=True, null=True),
                ),
                (
                    "vmware_hosts",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "vmware_vm_to_host_ratio",
                    models.FloatField(blank=True, default=0, null=True),
                ),
                (
                    "vmware_vms",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "openshift_cluster_instances",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "openshift_node_instances",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "report",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aggregate_report",
                        to="api.report",
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
                "abstract": False,
            },
        ),
    ]
