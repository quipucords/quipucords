---

- name: internal_host_started_processing_role
  set_fact:
    internal_host_started_processing_role: "jboss_eap5"

# Tasks that can locate an EAP_HOME directory.

# This locate task matches files like
#   - EAP_HOME/jboss-as/JBossEULA.txt
#   - EAP_HOME/jboss-as/lib/jboss-*  (lots of files like this)
#   - EAP_HOME/jboss-as/bin/run.jar
# The goal of this task is to produce a list of candidate EAP_HOME
# directories. We will gather more information on the candidates to
# make a determination.
- name: locate --ignore-case jboss
  raw: export LANG=C LC_ALL=C; locate JBossEULA.txt | sed -n -e "s/\(.*\)\/jboss-as\/\(.*\)/\1/gp" | uniq
  register: internal_jboss_eap5_locate_jboss_homes
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_locate and jboss_eap'

# This task locates Java processes with arguments like the following
# (found in a real, running JBoss EAP 5 server):
#   - -Djava.endorsed.dirs=/opt/jboss/jbosseap-5.2.0/jboss-eap-5.2/jboss-as/lib/endorsed
#   - -classpath /opt/jboss/jbosseap-5.2.0/jboss-eap-5.2/jboss-as/bin/run.jar:/lib/tools.jar
# It removes the extra '=' and ':'-delimited parts and produces
# candidate EAP_HOME directories.
- name: gather jboss.eap.processes
  raw: export LANG=C LC_ALL=C; ps -A -o comm -o args e --columns 10000 | egrep '^java.*(eap|jboss).*' | tr -s ' =:' '\n' | sed -n -e "s/\(.*\)\/jboss-as\/\(.*\)/\1/gp" | uniq
  register: internal_jboss_eap5_process_jboss_homes
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and jboss_eap'


# Combine the outputs of the above into a single fact

- name: combine EAP_HOME candidates into single list
  set_fact:
    eap5_home_candidates: "{{
      (internal_jboss_eap5_locate_jboss_homes.get('stdout_lines', []) +
       internal_jboss_eap5_process_jboss_homes.get('stdout_lines', []))|difference(['']) | unique }}"
  ignore_errors: yes
  when: 'jboss_eap'

# Filters that will help us find true EAP_HOME directories

- name: get version.txt from EAP_HOME candidates
  raw: export LANG=C LC_ALL=C; cat '{{ item }}/version.txt' 2>/dev/null
  register: internal_eap5_home_version_txt
  ignore_errors: yes
  with_items: "{{ eap5_home_candidates }}"
  when: 'jboss_eap'

- name: set eap5_home_version_txt fact
  set_fact:
    eap5_home_version_txt: "{{ internal_eap5_home_version_txt }}"
  ignore_errors: yes

- name: get readme.html from EAP_HOME candidates
  raw: export LANG=C LC_ALL=C; cat '{{ item }}/readme.html' 2>/dev/null
  register: internal_eap5_home_readme_html
  ignore_errors: yes
  with_items: "{{ eap5_home_candidates }}"
  when: 'jboss_eap'

- name: set eap5_home_readme_html fact
  set_fact:
    eap5_home_readme_html: "{{ internal_eap5_home_readme_html }}"
  ignore_errors: yes

- name: ls EAP_HOME/jboss-as
  raw: export LANG=C LC_ALL=C; ls -1 '{{ item }}/jboss-as' 2>/dev/null
  register: internal_eap5_home_ls_jboss_as
  ignore_errors: yes
  with_items: "{{ eap5_home_candidates }}"
  when: 'jboss_eap'

- name: set eap5_home_ls_jboss_as fact
  set_fact:
    eap5_home_ls_jboss_as: "{{ internal_eap5_home_ls_jboss_as }}"
  ignore_errors: yes

- name: EAP_HOME/jboss-as/bin/run.jar
  raw: export LANG=C LC_ALL=C; java -jar '{{ item }}/jboss-as/bin/run.jar' --version
  register: internal_eap5_home_run_jar_version
  ignore_errors: yes
  become: yes
  with_items: "{{ eap5_home_candidates }}"
  when: 'user_has_sudo and internal_have_java and jboss_eap'

- name: set eap5_home_run_jar_version fact
  set_fact:
    eap5_home_run_jar_version: "{{ internal_eap5_home_run_jar_version }}"
  ignore_errors: yes

# This is similar to the previous command, but works even when the EAP
# installation is broken.
- name: run.jar manifest
  raw: export LANG=C LC_ALL=C; unzip -p '{{ item }}/jboss-as/bin/run.jar' META-INF/MANIFEST.MF
  register: internal_eap5_home_run_jar_manifest
  ignore_errors: yes
  become: yes
  with_items: "{{ eap5_home_candidates }}"
  when: 'user_has_sudo and jboss_eap'

- name: set eap5_home_run_jar_manifest fact
  set_fact:
    eap5_home_run_jar_manifest: "{{ internal_eap5_home_run_jar_manifest }}"
  ignore_errors: yes
