---

- name: internal_host_started_processing_role
  set_fact:
    internal_host_started_processing_role: "jboss_ws"

# ----------------------------- FIND JWS_HOME ---------------------------------

- name: search for folder above TOMCAT_HOME listed in tomcat process
  raw: export LANG=C LC_ALL=C; ps -ef | grep tomcat | grep java |awk -F"catalina.base=" '{split($2,a," ");print FS a[1]}' |  awk 'BEGIN {FS="/";OFS="/";}{ $1=""; $NF="";print}'
  register: internal_jws_find_home_from_tomcat_process
  ignore_errors: yes
  when: 'jboss_ws'

# Only works if locate is installed
- name: search for folder above tomcat home with locate
  raw: export LANG=C LC_ALL=C; locate tomcat?/bin/startup.sh | awk -F 'tomcat' '{print $1}' | head -1
  register: internal_jws_find_home_from_tomcat_file
  ignore_errors: yes
  when: 'user_has_sudo and internal_have_locate and jboss_ws'

# If client has not renamed default JWS_HOME folder and followed recommended zip file install instructions, JWS_HOME should be in /opt.
- name: search for JWS_HOME in search directories
  raw: export LANG=C LC_ALL=C; find {{search_directories}} -type d 2>/dev/null | egrep '(ews|jws).*[0-99]\.[0-99]$'
  register: internal_jws_find_home_from_search
  ignore_errors: yes
  when: 'jboss_ws_ext'

- name: combine JWS_HOME candidates into a list
  set_fact:
    jws_home_candidates: "{{
        (internal_jws_find_home_from_search.get('stdout_lines', []) +
         internal_jws_find_home_from_tomcat_file.get('stdout_lines', []) +
         internal_jws_find_home_from_tomcat_process.get('stdout_lines', []))|difference(['']) | unique }}"
  ignore_errors: yes
  when: 'jboss_ws'

- name: ls JWS_HOME
  raw: export LANG=C LC_ALL=C; ls -d1 "{{ item }}" 2>/dev/null
  register: internal_jws_find_home
  with_items: "{{ jws_home_candidates }}"
  ignore_errors: yes
  when: 'jboss_ws'

- name: set jws_home based on jws_find_home
  set_fact:
      jws_home: "{{ internal_jws_find_home['results'][0]['stdout_lines'][0] }}"
  ignore_errors: yes
  when:
    - 'jboss_ws'
    - 'internal_jws_find_home is defined'
    - "'results' in internal_jws_find_home"
    - "internal_jws_find_home['results'] | length > 0"
    - "'stdout_lines' in internal_jws_find_home['results'][0]"
    - "internal_jws_find_home['results'][0]['stdout_lines'] | length > 0"

# ------------------------------ DETECT JWS/EWS -------------------------------
- name: check jws presence with yum
  raw: export LANG=C LC_ALL=C; yum grouplist jws3 jws3plus jws5 jws6 2>/dev/null | grep -A1 'Installed Groups:' | grep 'Red Hat JBoss Web Server [0-99]'
  register: internal_jws_installed_with_rpm
  ignore_errors: yes
  when: 'jboss_ws'

- name: set jws_installed_with_rpm fact
  set_fact:
    jws_installed_with_rpm: "{{internal_jws_installed_with_rpm}}"
  ignore_errors: yes

  # If tomcat was installed with a Redhat product, a 'redhat' string can be found in certain files
- name: determine if tomcat is installed from upstream or as part of redhat product
  raw: export LANG=C LC_ALL=C; \[ $(grep -iR redhat "{{ jws_home }}"/tomcat[0-99] 2>/dev/null| wc -l) != 0 \] && echo False || echo True
  register: internal_tomcat_is_part_of_redhat_product
  ignore_errors: yes
  when: 'jws_home is defined and jboss_ws'

- name: set tomcat_is_part_of_redhat_product fact
  set_fact:
    tomcat_is_part_of_redhat_product: "{{internal_tomcat_is_part_of_redhat_product}}"
  ignore_errors: yes

- name: see if JBossEULA.txt exists
  raw: export LANG=C LC_ALL=C; if [ -f "{{ jws_home }}"/JBossEULA.txt ]; then FOUND="true"; else FOUND="false"; fi; echo ${FOUND}
  register: internal_jws_has_eula_txt_file
  ignore_errors: yes
  when: 'jws_home is defined and jboss_ws'

- name: set jws_has_eula_txt_file fact
  set_fact:
    jws_has_eula_txt_file: "{{internal_jws_has_eula_txt_file}}"
  ignore_errors: yes

- name: check for jws cert
  raw: export LANG=C LC_ALL=C; ls /etc/pki/product/185.pem /etc/pki/product-default/185.pem 2>/dev/null | sort -u
  register: internal_jws_has_cert
  ignore_errors: yes
  when: 'jboss_ws'

- name: set jws_has_cert fact
  set_fact:
    jws_has_cert: "{{internal_jws_has_cert}}"
  ignore_errors: yes

# ------------------------------ FIND JWS VERSION -----------------------------

  # Ver 2.0.1 and below have a unique combination of httpd and tomcat versions
- name: find JWS version 2 and below
  raw: >
      export LANG=C LC_ALL=C;
      (echo -n $(."{{ jws_home }}"/httpd/sbin/httpd -v | grep Apache);
      echo $(."{{ jws_home }}"/tomcat*/bin/version.sh
      | grep "Server version"))
      | sed -e 's/Server version\: //g'
  register: internal_jws_version_2
  ignore_errors: yes
  when: 'jws_home is defined and jboss_ws'

  # Ver 3.x.x mentioned in id tags in “TOMCAT_HOME/webapps/docs/changelog.html”
- name: find JWS version 3.x.x
  raw: export LANG=C LC_ALL=C; awk -F 'id=' '/JWS/ {print substr($2,16,9)}' "{{ jws_home }}"/tomcat?/webapps/docs/changelog.html 2>/dev/null | grep JWS | head -n1
  register: internal_jws_version_3
  ignore_errors: yes
  when: 'jws_home is defined and jboss_ws'

  # JWS version 4 does not exist.

  # Ver 5.x.x has version.txt in JWS_HOME when installed with zip file
  # Provides exact version
- name: find JWS version
  raw: export LANG=C LC_ALL=C; cat "{{ jws_home }}"/version.txt  2>/dev/null| grep "Red Hat JBoss Web Server"
  register: internal_jws_version_5_txtfile
  ignore_errors: yes
  when: 'jws_home is defined and jboss_ws'

  # Ver 5.x.x has a jws5-tomcat.service unit installed.
  # Only provides major version (5).
- name: find JWS version through systemctl
  raw: export LANG=C LC_ALL=C; systemctl status 'jws*-tomcat.service' 2>/dev/null | grep "Apache Tomcat Web" | grep -o 'jws[0-9]\+'
  register: internal_jws_version_5_systemctl
  ignore_errors: yes
  when: 'internal_have_systemctl and jboss_ws'

  # Additional methods of finding different versions can be appended to
  # jws_version. A map of the raw stdout value to the correctly formatted
  # version string should be appended to JWS_CLASSIFICATIONS in jboss_web_server.py
- name: combine versions into a list
  set_fact:
    jws_version: "{{
        (internal_jws_version_2 .get('stdout_lines', []) +
         internal_jws_version_3.get('stdout_lines', []) +
         internal_jws_version_5_txtfile.get('stdout_lines', []) +
         internal_jws_version_5_systemctl.get('stdout_lines', []))|difference(['']) | unique }}"
  ignore_errors: yes
  when: 'jboss_ws'
