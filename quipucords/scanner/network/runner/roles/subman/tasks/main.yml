---

- name: internal_host_started_processing_role
  set_fact:
    internal_host_started_processing_role: "subman"

# subman_cpu_cpu fact
- name: gather subman.cpu.cpu(s) fact
  raw: subscription-manager facts --list | grep '^cpu.cpu(s).' | sed -n -e 's/^.*cpu.cpu(s).\s*//p'
  register: internal_subman_cpu_cpu_cmd
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_subscription_manager'

- name: extract result value for subman.cpu.cpu(s)
  set_fact:
    subman_cpu_cpu: "{{ internal_subman_cpu_cpu_cmd['stdout_lines'][-1] | trim | default(None) }}"
  ignore_errors: yes
  when:
    - '"stdout_lines" in internal_subman_cpu_cpu_cmd'
    - 'internal_subman_cpu_cpu_cmd["stdout_lines"] | length > 0'

# subman_cpu_core_per_socket fact
- name: gather subman.cpu.core(s)_per_socket fact
  raw: subscription-manager facts --list | grep '^cpu.core(s)_per_socket.' | sed -n -e 's/^.*cpu.core(s)_per_socket.\s*//p'
  register: internal_subman_cpu_core_per_socket_cmd
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_subscription_manager'

- name: extract result value for subman.cpu.core(s)_per_socket
  set_fact:
    subman_cpu_core_per_socket: "{{  internal_subman_cpu_core_per_socket_cmd['stdout_lines'][-1] | trim | default(None) }}"
  ignore_errors: yes
  when:
    - '"stdout_lines" in internal_subman_cpu_core_per_socket_cmd'
    - 'internal_subman_cpu_core_per_socket_cmd["stdout_lines"] | length > 0'

# subman_cpu_cpu_socket fact
- name: gather subman.cpu.cpu_socket(s) fact
  raw: subscription-manager facts --list | grep '^cpu.cpu_socket(s).' | sed -n -e 's/^.*cpu.cpu_socket(s).\s*//p'
  register: internal_subman_cpu_cpu_socket_cmd
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_subscription_manager'

- name: extract result value for subman.cpu.cpu_socket(s)
  set_fact:
    subman_cpu_cpu_socket: "{{  internal_subman_cpu_cpu_socket_cmd['stdout_lines'][-1] | trim | default(None) }}"
  ignore_errors: yes
  when:
    - '"stdout_lines" in internal_subman_cpu_cpu_socket_cmd'
    - 'internal_subman_cpu_cpu_socket_cmd["stdout_lines"] | length > 0'

# subman_virt_host_type fact
- name: gather subman.virt.host_type fact
  raw: subscription-manager facts --list | grep '^virt.host_type.' | sed -n -e 's/^.*virt.host_type.\s*//p'
  register: internal_subman_virt_host_type_cmd
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_subscription_manager'

- name: extract result value for subman.virt.host_type
  set_fact:
    subman_virt_host_type: "{{  internal_subman_virt_host_type_cmd['stdout_lines'][-1] | trim | default(None) }}"
  when:
    - '"stdout_lines" in internal_subman_virt_host_type_cmd'
    - 'internal_subman_virt_host_type_cmd["stdout_lines"] | length > 0'

# subman_virt_is_guest fact
- name: gather subman.virt.is_guest fact
  raw: subscription-manager facts --list | grep '^virt.is_guest.' | sed -n -e 's/^.*virt.is_guest.\s*//p'
  register: internal_subman_virt_is_guest_cmd
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_subscription_manager'

- name: extract result value for subman.virt.is_guest
  set_fact:
    subman_virt_is_guest: "{{  internal_subman_virt_is_guest_cmd['stdout_lines'][-1] | string() | trim | default(None) }}"
  ignore_errors: yes
  when:
    - '"stdout_lines" in internal_subman_virt_is_guest_cmd'
    - 'internal_subman_virt_is_guest_cmd["stdout_lines"] | length > 0'


# subman_virt_uuid fact
- name: gather subman.virt.uuid fact
  raw: subscription-manager facts --list 2>/dev/null | grep '^virt.uuid.' | sed -n -e 's/^.*virt.uuid.\s*//p'
  register: internal_subman_virt_uuid_cmd
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_subscription_manager'

- name: extract result value for subman.virt.uuid
  set_fact:
    subman_virt_uuid: "{{  internal_subman_virt_uuid_cmd['stdout_lines'][-1] | trim | default(None) }}"
  ignore_errors: yes
  when:
    - '"stdout_lines" in internal_subman_virt_uuid_cmd'
    - 'internal_subman_virt_uuid_cmd["stdout_lines"] | length > 0'

# subman_overall_status fact
- name: gather subman.overall.status fact
  raw: LANG=C subscription-manager status | grep -e 'Overall Status:'| cut -d ":" -f2
  register: internal_subman_overall_status_cmd
  ignore_errors: yes
  become: yes
  when:
    - user_has_sudo
    - internal_have_subscription_manager

- name: extract result value for subman.overall.status
  set_fact:
    subman_overall_status: "{{ internal_subman_overall_status_cmd['stdout_lines'][-1] | string() | trim | default(None) }}"
  ignore_errors: yes
  when:
    - '"stdout_lines" in internal_subman_overall_status_cmd'
    - 'internal_subman_overall_status_cmd["stdout_lines"] | length > 0'

# subman fact
- name: gather subman.has_facts_file fact
  raw: ls /etc/rhsm/facts 2>/dev/null | grep .facts | wc -l
  register: internal_subman_facts_file_lines
  ignore_errors: yes
  when: 'internal_have_subscription_manager'

- name: add subman.has_facts_file to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: (internal_subman_facts_file_lines['stdout_lines'][-1] | int) > 0 }) }}"
  with_items:
  - 'subman.has_facts_file'
  ignore_errors: yes
  when:
    - 'internal_have_subscription_manager'
    - '"stdout_lines" in internal_subman_facts_file_lines'
    - 'internal_subman_facts_file_lines["stdout_lines"] | length > 0'

# subman_consumed fact
- name: gather internal_subman_consumed
  raw: subscription-manager list --consumed 2>/dev/null | grep -e '^SKU' -e '^Subscription Name' | sed -n -e 's/SKU\s*.\s*//p' -e 's/Subscription Name\s*.\s*//p' | awk '{ ORS = (NR%2 ? " - " {{":"}} RS) } 1'
  register: internal_subman_consumed
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_subscription_manager'

- name: set subman_consumed fact
  set_fact:
    subman_consumed: "{{internal_subman_consumed}}"
  ignore_errors: yes

#  subscription_manager_id fact
- name: gather subscription_manager_id fact
  raw: |
    subscription-manager identity 2>/dev/null | 
    grep 'system identity:' |
    sed 's/system identity:\s*//'
  register: internal_subscription_manager_id_cmd
  ignore_errors: yes
  become: yes
  when: 'user_has_sudo and internal_have_subscription_manager'

- name: extract result value for subscription_manager_id
  set_fact:
    subscription_manager_id: "{{ internal_subscription_manager_id_cmd['stdout_lines'][-1] | trim | default(None) }}"
  ignore_errors: yes
  when:
    - '"stdout_lines" in internal_subscription_manager_id_cmd'
    - 'internal_subscription_manager_id_cmd["stdout_lines"] | length > 0'
