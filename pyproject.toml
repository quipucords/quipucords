[project]
name = "quipucords"
version = "1.11.1"
description = "Tool for discovery, inspection, collection, deduplication, and reporting on an IT environment."
authors = [
    {name = "Quipucords Dev Team", email = "quipucords@redhat.com"},
]
readme = "README.md"
license = {text = "GPLv3"}
requires-python = "<3.14,>=3.12"
dependencies = [
    "ansible<11,>=10",
    "django<5.0.0,>=4.2.17",
    "django-filter>=22.1",
    "djangorestframework<4.0,>=3.14",
    "jmespath<2.0.0,>=1.0.1",
    "paramiko<4.0.0,>=3.0.0",
    "pexpect<5.0.0,>=4.8.0",
    "pyvmomi<9.0.0,>=8.0.2",
    "pyyaml<7.0.0,>=6.0.1",
    "requests<3.0.0,>=2.32.2",
    "whitenoise<7.0.0,>=6.3.0",
    "psycopg2<3",
    "ansible-runner<3.0.0,>=2.4.0",
    "gunicorn<23.0.0,>=22.0.0",
    "openshift>=0.13",
    "pydantic<2.0.0,>=1.10.4",
    "django-environ<1.0.0,>=0.10.0",
    "celery[redis]<6.0.0,>=5.3.0",
    "more-itertools<10.0.0,>=9.1.0",
    "django-cors-headers<5.0.0,>=4.3.1",
    "django-axes<7.0.0,>=6.3.0",
    "drf-spectacular[sidecar]<1.0.0,>=0.28.0",
    # Temporary hack to handle: https://pagure.io/python-daemon/issue/92
    # quipucords does not directly use python-daemon, but our requirement
    # ansible-runner does, and ansible-runner simply declares '*' version.
    # Pinning python-daemon<3.0.0 works around this downstream build error:
    #   ModuleNotFoundError: No module named 'setuptools.extern'
    # This has been fixed in python-daemon source but not yet released.
    # We should remove this pinned version as soon as >3.0.1 is available.
    "python-daemon<3.0.0",
]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=2.0"]

[tool.poetry]
requires-poetry = ">=2.0"

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.7.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.1"
coverage = "^7.0.5"
factory-boy = "^3.2.1"
pytest-cov = "<4"
pytest-django = "^4.5.2"
pytest-lazy-fixture = "^0.6.3"
pytest-mock = "^3.10.0"
pytest-recording = "^0.12.1"
pytest-timeout = "^2.1.0"
pytest-xdist = "^3.1.0"
requests-mock = "^1.10.0"
httpretty = "^1.1.4"
pip-tools = "^7.3.0"
watchdog = {extras = ["watchmedo"], version = "^2.2.1"}
pybuild-deps = "^0.3.0"
pytest-profiling = "^1.7.0"
ipython = "^8.10.0"
django-extensions = "^3.2.1"
notebook = "^6.5.3"
ruff = "^0"

[tool.pytest.ini_options]
pythonpath = "quipucords/"
addopts = [
    "--ds=quipucords.settings",
    "--block-network",
    "--allowed-hosts=127.0.0.1,::1,.*\\.sock",
]

[tool.ruff]
lint.select = [
    "C90", # mccabe complexity
    "D",   # pydocstyle
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort
    "Q",   # flake8-quotes
    "W",   # pycodestyle
    "PL",  # Pylint
    "BLE", # flake8-blind-except
    "PTH", # flake8-use-pathlib
    "S",   # flake8-bandit
    "N",   # pep8-naming
]
lint.ignore = [
    "D107",
    "D203", 
    "D403",
]
src = ["quipucords"]
target-version = "py311"

[tool.ruff.lint.isort]
known-first-party = [
    "api",
    "compat",
    "constants",
    "fingerprinter",
    "log_messages",
    "quipucords",
    "scanner",
    "tests",
    "utils",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"**test**" = [
    "PLC1901", 
    "PLR2004",
    "S101",
    "S105",
    "S106",
    "S107",
    "S311",
]
"quipucords/api/migrations/*.py" = ["D100", "D101"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "pep257"
